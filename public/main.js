'use strict';

// window.app = angular.module('portfolio', ['ui.router', 'ngAnimate']);
window.app = angular.module('portfolio', ['ui.router']);

app.config(function ($urlRouterProvider, $locationProvider, $urlMatcherFactoryProvider) {

	// this makes the '/stores/' route correctly redirect to '/stores'
	$urlRouterProvider.rule(function ($injector, $location) {

		var re = /(.+)(\/+)(\?.*)?$/;
		var path = $location.url();

		if (re.test(path)) {
			return path.replace(re, '$1$3');
		}

		return false;
	});
	// This turns off hashbang urls (/#about) and changes it to something normal (/about)
	$locationProvider.html5Mode(true);
	$urlRouterProvider.when('/auth/:provider', function () {
		window.location.reload();
	});
	// If we go to a URL that ui-router doesn't have registered, go to the "/" url.
	$urlRouterProvider.otherwise('/');
});

app.controller('aboutCtrl', function ($scope) {
	var theWindow = $(window);
	var force = d3.layout.force();
	var stopped = true;

	// angular.element(document).ready(function(){
	$scope.skills = [{ name: "JavaScript", level: 3 }, { name: "MongoDB", level: 3 }, { name: "Express.js", level: 3 }, { name: "Angular.js", level: 3 }, { name: "Node.js", level: 3 }, { name: "Mongoose.js", level: 3 }, { name: "Git", level: 3 }, { name: "CSS3", level: 3 }, { name: "HTML5", level: 3 }, { name: "Responsive Design", level: 2 }, { name: "Gulp", level: 2 }, { name: "Mocha & Chai", level: 2 }, { name: "jQuery", level: 2 }, { name: "Bootstrap", level: 2 }, { name: "Web-Audio", level: 2 }, { name: "Chrome Extensions", level: 1 }, { name: "SQL", level: 1 }, { name: "WebSockets", level: 1 }, { name: "MIDI", level: 1 }, { name: "Java", level: 1 }, { name: "C++", level: 1 }];

	$scope.colors = ['#7FFFD4', '#E0FFFF', '#33CCFF', '#C688E8', '#FF807D', '#FF8EB2'];

	$scope.skills.map(function (e, i) {
		e.color = $scope.colors[i % 6];
	});

	function initializeSkillsCloud() {
		var skillsCloud = $("#skills-cloud");
		var width = skillsCloud.width();
		var height = skillsCloud.height();
		var svg = d3.select("#skills-cloud").append("svg");

		//create nodes
		var nodes = d3.range($scope.skills.length).map(function (i) {
			return {
				radius: $scope.skills[i].level * 18 + 14,
				label: $scope.skills[i].name,
				skillLevel: $scope.skills[i].level,
				bgColor: $scope.skills[i].color
			};
		});

		var root = nodes[0];
		root.radius = 0;
		root.fixed = true;

		var groups = svg.selectAll("g").data(nodes.slice(1)).enter().append("g");

		var circles = groups.append('circle').data(nodes.slice(1)).attr("r", function (d) {
			return d.radius;
		}).style("fill", function (d, i) {
			return d.bgColor;
		});

		var label = groups.append("text").text(function (d) {
			return d.label;
		}).attr({
			"alignment-baseline": "middle",
			"text-anchor": "middle"
		});

		force.gravity(0.05).charge(function (d, i) {
			return i ? 0 : -3000;
		}).nodes(nodes);

		if (navigator.userAgent.split("Chrome").length < 2) {
			force.size([width - 100, height + 600]); //safari
		} else {
				force.size([width - 200, height - 300]); //chrome
			}

		force.start();
		stopped = false;

		force.on("tick", function (e) {
			var q = d3.geom.quadtree(nodes),
			    i = 0,
			    n = nodes.length;

			while (++i < n) q.visit(collide(nodes[i]));

			//move circles
			svg.selectAll("circle").attr("cx", function (d) {
				return d.x;
			}).attr("cy", function (d) {
				return d.y;
			});

			//move labels
			svg.selectAll("text").attr("x", function (d) {
				return d.x;
			}).attr("y", function (d) {
				return d.y;
			});
		});

		svg.on("mousemove", function () {
			var p1 = d3.mouse(this);
			root.px = p1[0];
			root.py = p1[1];
			force.resume();
		});

		//So they don't all start out in a straight line
		root.px = 1;
		root.py = 1;

		function collide(node) {
			var r = node.radius + 16,
			    nx1 = node.x - r,
			    nx2 = node.x + r,
			    ny1 = node.y - r,
			    ny2 = node.y + r;
			return function (quad, x1, y1, x2, y2) {
				if (quad.point && quad.point !== node) {
					var x = node.x - quad.point.x,
					    y = node.y - quad.point.y,
					    l = Math.sqrt(x * x + y * y),
					    r = node.radius + quad.point.radius;

					if (l < r) {
						l = (l - r) / l * 0.5;
						node.x -= x *= l;
						node.y -= y *= l;
						quad.point.x += x;
						quad.point.y += y;
					}
				}
				return x1 > nx2 || x2 < nx1 || y1 > ny2 || y2 < ny1;
			};
		}
	}
	// });

	var firefox;
	if (navigator.userAgent.split("Safari").length < 2 && navigator.userAgent.split("Chrome").length < 2) {
		firefox = true;
	}

	if (firefox) {
		$('#skills-cloud').css({ 'display': 'none' });
		$('#skills-mobile').css({ 'display': 'block', 'margin-top': '24px', 'margin-bottom': '44px', 'height': '700px' });

		setTimeout(function () {
			$('.skill-circle').css({ 'padding': '1px', 'padding-right': '32%', 'font-family': 'Oxygen', 'font-size': '19px', 'font-weight': '300', 'float': 'right' });
		}, 500);
	}

	if (theWindow.width() > 1074 && !firefox) {
		initializeSkillsCloud();
	}

	theWindow.resize(function () {
		if (theWindow.width() > 1074 && !firefox) {
			$('html,body').scrollTop(0);
			//start / restart mouseover listener if stopped
			if (stopped) {
				initializeSkillsCloud();
			}
		} else {
			force.stop();
		}
	});
});

app.controller('contactCtrl', function ($scope, $http) {
	$scope.formData = {};

	$scope.sendMail = function () {
		$scope.waiting = true;
		$scope.sent = false;
		$scope.success = false;
		$http.post('/api/contact', $scope.formData).then(function (successResponse) {
			$scope.waiting = false;
			$scope.sent = true;
			$scope.success = successResponse.data;
			$scope.formData = {};
		});
	};

	var resumeLabel = $('#resume');
	var overlay = $('#overlay');
	var resume = $('#resume-container');

	resumeLabel.click(function () {
		overlay.css({ 'opacity': '.7', 'z-index': '1' });
		resume.css({ 'display': 'block' });
	});
	overlay.click(function () {
		overlay.css({ 'opacity': '0', 'z-index': '-1' });
		resume.css({ 'display': 'none' });
	});

	// function explode() {
	//
	// 	$('#canvas').css({'display' : 'initial'});
	//
	// 	var requestId;
	//
	// 	var canvas = document.getElementById("canvas"),
	// 		context = canvas.getContext("2d"),
	// 		width = canvas.width = window.innerWidth,
	// 		height = canvas.height = window.innerHeight,
	// 		particle = [],
	// 		particleCount = 0,
	// 		gravity = 0.3,
	// 		colors = ['#7FFFD4','#E0FFFF','#33CCFF','#C688E8','#FF807D','#FF8EB2'];
	//
	// 	for( var i = 0; i < 50; i++){
	// 		particle.push({
	// 			x : width/2,
	// 			y : height/2,
	// 			boxW : randomRange(5,20),
	// 			boxH : randomRange(5,20),
	// 			size : randomRange(2,8),
	//
	// 			spikeran:randomRange(3,5),
	//
	// 			velX :randomRange(-8,8),
	// 			velY :randomRange(-50,-10),
	//
	// 			angle :convertToRadians(randomRange(0,360)),
	// 			color:colors[Math.floor(Math.random() * colors.length)],
	// 			anglespin:randomRange(-0.2,0.2),
	//
	// 			draw : draw
	// 		});
	// 	}
	//
	// 	var r1={
	// 		x:width/2-150,
	// 		y:height/2-150,
	// 		width:300,
	// 		height:300,
	// 		velX :0,
	// 		velY :-10,
	// 		alphatop:0
	// 	};
	//
	//
	// 	function drawScreen(){
	// 		var size = 50;
	// 		if (r1.alphatop < 1){
	// 			r1.alphatop += 0.01;
	// 		} else{
	// 			r1.alphatop = 1;
	// 		}
	// 		context.globalAlpha = r1.alphatop;
	//
	// 		if(r1.alphatop === 1){
	// 			r1.velY*= 0.999;
	// 			r1.velY += 0.3;
	// 			r1.x += r1.velX;
	// 			r1.y += r1.velY;
	// 		}
	//
	// 		if(r1.y + r1.height > height){
	// 			r1.anglespin = 0;
	// 			r1.y = height - r1.height;
	// 			r1.velY *= -0.8;
	// 			r1.velX *= 0.9;
	// 		}
	//
	// 		context.globalAlpha = 1;
	//
	// 		for( var i = 0; i < particle.length; i++){
	// 			particle[i].draw();
	// 		}
	// 	}
	//
	// 	function update(){
	// 		context.clearRect(0,0,width,height);
	// 		drawScreen();
	// 		requestId = requestAnimationFrame(update);
	// 	}
	//
	// 	update();
	//
	// 	setTimeout(function(){
	// 		window.cancelAnimationFrame(requestId);
	// 		requestId = undefined;
	// 	},5000);
	//
	// 	function randomRange(min, max){
	// 		return min + Math.random() * (max - min );
	// 	}
	//
	// 	function randomInt(min, max){
	// 		return Math.floor(min + Math.random()* (max - min + 1));
	// 	}
	//
	// 	function convertToRadians(degree) {
	// 		return degree*(Math.PI/180);
	// 	}
	//
	// 	function drawStar(cx, cy, spikes, outerRadius, innerRadius,color) {
	// 		var rot = Math.PI / 2 * 3;
	// 		var x = cx;
	// 		var y = cy;
	// 		var step = Math.PI / spikes;
	//
	// 		context.strokeSyle = "#000";
	// 		context.beginPath();
	// 		context.moveTo(cx, cy - outerRadius);
	// 		for (i = 0; i < spikes; i++) {
	// 			x = cx + Math.cos(rot) * outerRadius;
	// 			y = cy + Math.sin(rot) * outerRadius;
	// 			context.lineTo(x, y);
	// 			rot += step;
	//
	// 			x = cx + Math.cos(rot) * innerRadius;
	// 			y = cy + Math.sin(rot) * innerRadius;
	// 			context.lineTo(x, y);
	// 			rot += step;
	// 		}
	//
	// 		context.lineTo(cx, cy - outerRadius);
	// 		context.closePath();
	// 		context.fillStyle=color;
	// 		context.fill();
	// 	}
	//
	// 	function draw(){
	// 		context.save();
	// 		context.translate(this.x,this.y);
	// 		context.rotate(this.angle);
	// 		context.fillStyle=this.color;
	// 		context.beginPath();
	// 		// drawStar(0, 0, 5, this.boxW, this.boxH);
	// 		context.fillRect(this.boxW/2*-1,this.boxH/2*-1,this.boxW,this.boxH);
	// 		context.fill();
	// 		context.closePath();
	// 		context.restore();
	// 		this.angle += this.anglespin;
	// 		this.velY*= 0.999;
	// 		this.velY += 0.3;
	// 		this.x += this.velX;
	// 		this.y += this.velY;
	//
	// 		if(this.y < 0){
	// 			this.velY *= -0.2;
	// 			this.velX *= 0.9;
	// 		}
	// 		if (this.y > height){
	// 			this.anglespin = 0;
	// 			this.y = height;
	// 			this.velY *= -0.2;
	// 			this.velX *= 0.9;
	// 		}
	// 		if (this.x > width ||this.x< 0){
	// 			this.velX *= -0.5;
	// 		}
	// 	}
	// }
});

app.config(function ($stateProvider) {
	$stateProvider.state('home', {
		url: '/',
		templateUrl: '/js/templates/home.html',
		controller: 'homeCtrl'
	}).state('projects', {
		url: '/projects',
		templateUrl: '/js/templates/projects.html',
		controller: 'projectCtrl'
	}).state('about', {
		url: '/about',
		templateUrl: '/js/templates/about.html',
		controller: 'aboutCtrl'
	}).state('contact', {
		url: '/contact',
		templateUrl: '/js/templates/contact.html',
		controller: 'contactCtrl'
	});
});

app.controller('homeCtrl', function ($scope, $state) {
	$scope.$state = $state;
	var increment = 0;
	var carousel = $('#carousel');
	var current = '#fig-1';
	var prev;
	var theWindow = $(window);
	var interval;
	var bars = $('#static-bars > li');
	var header = $('.left-col');

	if (theWindow.width() > 768) {
		interval = setInterval(rotate, 1500);
	} else {
		var speed;
		bars.each(function (index) {
			speed = (index + 1) * 0.3;
			$(this).css({ 'animation': 'slideInLeft ' + speed + 's' });
		});
		header.removeClass("animated").removeClass('flipInX');
	}

	theWindow.resize(function () {
		clearInterval(interval);
		if (theWindow.width() > 768) {
			$('html,body').scrollTop(0);
			interval = setInterval(rotate, 1500);
		}
	});

	function rotate() {
		increment++;
		carousel.css({ '-webkit-transform': 'rotateX(' + increment * -60 + 'deg)' });
		carousel.attr('data-state', increment % 6 + 1);
		prev = current;
		current = '#fig-' + (increment % 6 + 1);
	}
});

app.controller('projectCtrl', function ($scope) {
	var theWindow = $(window);

	var skewMode = false;
	var curPage;
	function initializeSkew() {
		skewMode = true;
		$(document).ready(function () {

			var numOfPages = $(".skw-page").length;
			var animTime = 1000;
			var scrolling = false;
			var pgPrefix = ".skw-page-";
			// var progPrefix = "#p";

			curPage = parseInt(window.location.hash.split("#p")[1]) + 1 || 1;

			for (var i = 1; i <= numOfPages; i++) {
				if (i < curPage) {
					$(pgPrefix + i).addClass("active").addClass("inactive");
				} else if (i === curPage) {
					$(pgPrefix + i).addClass("active").removeClass("inactive");
				} else {
					$(pgPrefix + i).removeClass("active").removeClass("inactive");
				}
			}

			function pagination() {
				scrolling = true;

				$(pgPrefix + curPage).removeClass("inactive").addClass("active");
				// $(progPrefix + curPage).addClass("current");
				setTimeout(function () {
					scrolling = false;
				}, animTime);
			}

			function navigateUp() {
				if (curPage === 1) return;
				curPage--;
				$(pgPrefix + (curPage + 1)).removeClass("active");
				// $(progPrefix + (curPage + 1)).removeClass("current");
				pagination();
			}

			function navigateDown() {
				if (curPage === numOfPages) return;
				curPage++;
				$(pgPrefix + (curPage - 1)).addClass("inactive");
				// $(progPrefix + (curPage -1)).removeClass("current");
				pagination();
			}

			$(document).off(); //reset event listeners

			$(document).on("mousewheel DOMMouseScroll", function (e) {
				if (scrolling) return;
				if (e.originalEvent.wheelDelta > 0 || e.originalEvent.detail < 0) {
					navigateUp();
				} else {
					navigateDown();
				}
			});

			$(document).on("keydown", function (e) {
				if (scrolling) return;
				if (e.which === 38) {
					navigateUp();
				} else if (e.which === 40) {
					navigateDown();
				}
			});
		});
	}

	if (theWindow.width() > 768) {
		console.log('INITIALIZING SKEW');
		initializeSkew();
	}

	theWindow.resize(function () {
		if (theWindow.width() > 768) {
			// $('html,body').scrollTop(0);
			//start / restart mouseover listener if stopped
			if (!skewMode) {
				initializeSkew();
			}
		}
	});
});

app.directive('projectsMobile', function () {
	return {
		restrict: 'E',
		templateUrl: '/js/directives/projects-mobile.html'
	};
});
//# sourceMappingURL=data:application/json;base64,
