'use strict';

window.app = angular.module('portfolio', ['ui.router']);

app.config(function ($urlRouterProvider, $locationProvider, $urlMatcherFactoryProvider) {

	// this makes the '/stores/' route correctly redirect to '/stores'
	$urlRouterProvider.rule(function ($injector, $location) {

		var re = /(.+)(\/+)(\?.*)?$/;
		var path = $location.url();

		if (re.test(path)) {
			return path.replace(re, '$1$3');
		}

		return false;
	});
	// This turns off hashbang urls (/#about) and changes it to something normal (/about)
	$locationProvider.html5Mode(true);
	$urlRouterProvider.when('/auth/:provider', function () {
		window.location.reload();
	});
	// If we go to a URL that ui-router doesn't have registered, go to the "/" url.
	$urlRouterProvider.otherwise('/');
});

app.controller('contactCtrl', function ($scope, $http) {
	$scope.formData = {};

	$scope.sendMail = function () {
		$scope.waiting = true;
		$scope.sent = false;
		$scope.success = false;
		$http.post('/api/contact', $scope.formData).then(function (successResponse) {
			console.log(successResponse);
			$scope.waiting = false;
			$scope.sent = true;
			$scope.success = successResponse.data;
			$scope.formData = {};
		});
	};
});

app.config(function ($stateProvider) {
	$stateProvider.state('home', {
		url: '/',
		templateUrl: '/js/templates/home.html'
	}).state('projects', {
		url: '/projects',
		templateUrl: '/js/templates/projects.html',
		controller: 'projectCtrl'
	}).state('about', {
		url: '/about',
		templateUrl: '/js/templates/about.html'
	}).state('contact', {
		url: '/contact',
		templateUrl: '/js/templates/contact.html',
		controller: 'contactCtrl'
	});
});

app.controller('projectCtrl', function ($scope) {
	$(document).ready(function () {

		var curPage = 1;
		var numOfPages = $(".skw-page").length;
		var animTime = 1000;
		var scrolling = false;
		var pgPrefix = ".skw-page-";

		function pagination() {
			scrolling = true;

			$(pgPrefix + curPage).removeClass("inactive").addClass("active");
			$(pgPrefix + (curPage - 1)).addClass("inactive");
			$(pgPrefix + (curPage + 1)).removeClass("active");

			setTimeout(function () {
				scrolling = false;
			}, animTime);
		};

		function navigateUp() {
			if (curPage === 1) return;
			curPage--;
			pagination();
		};

		function navigateDown() {
			if (curPage === numOfPages) return;
			curPage++;
			pagination();
		};

		$(document).on("mousewheel DOMMouseScroll", function (e) {
			if (scrolling) return;
			if (e.originalEvent.wheelDelta > 0 || e.originalEvent.detail < 0) {
				navigateUp();
			} else {
				navigateDown();
			}
		});

		$(document).on("keydown", function (e) {
			if (scrolling) return;
			if (e.which === 38) {
				navigateUp();
			} else if (e.which === 40) {
				navigateDown();
			}
		});
	});
});
//# sourceMappingURL=data:application/json;base64,
