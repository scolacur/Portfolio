'use strict';

// window.app = angular.module('portfolio', ['ui.router', 'ngAnimate']);
window.app = angular.module('portfolio', ['ui.router']);

app.config(function ($urlRouterProvider, $locationProvider, $urlMatcherFactoryProvider) {

	// this makes the '/stores/' route correctly redirect to '/stores'
	$urlRouterProvider.rule(function ($injector, $location) {

		var re = /(.+)(\/+)(\?.*)?$/;
		var path = $location.url();

		if (re.test(path)) {
			return path.replace(re, '$1$3');
		}

		return false;
	});
	// This turns off hashbang urls (/#about) and changes it to something normal (/about)
	$locationProvider.html5Mode(true);
	$urlRouterProvider.when('/auth/:provider', function () {
		window.location.reload();
	});
	// If we go to a URL that ui-router doesn't have registered, go to the "/" url.
	$urlRouterProvider.otherwise('/');
});

app.controller('aboutCtrl', function ($scope) {
	var theWindow = $(window);
	var force = d3.layout.force();
	var stopped = true;

	// angular.element(document).ready(function(){
	$scope.skills = [{ name: "JavaScript", level: 3 }, { name: "MongoDB", level: 3 }, { name: "Express.js", level: 3 }, { name: "Angular.js", level: 3 }, { name: "Node.js", level: 3 }, { name: "Mongoose.js", level: 3 }, { name: "Git", level: 3 }, { name: "CSS3", level: 3 }, { name: "HTML5", level: 3 }, { name: "Resonsive Design", level: 2 }, { name: "Gulp", level: 2 }, { name: "Mocha & Chai", level: 2 }, { name: "jQuery", level: 2 }, { name: "Bootstrap", level: 2 }, { name: "Web-Audio", level: 2 }, { name: "Chrome Extensions", level: 1 }, { name: "SQL", level: 1 }, { name: "WebSockets", level: 1 }, { name: "MIDI", level: 1 }, { name: "Java", level: 1 }, { name: "C++", level: 1 }];

	$scope.colors = ['#7FFFD4', '#E0FFFF', '#33CCFF', '#C688E8', '#FF807D', '#FF8EB2'];

	$scope.skills.map(function (e, i) {
		e.color = $scope.colors[i % 6];
	});
	function initializeSkillsCloud() {
		var skillsCloud = $("#skills-cloud");
		var width = skillsCloud.width();
		var height = skillsCloud.height();
		var svg = d3.select("#skills-cloud").append("svg");

		//create nodes
		var nodes = d3.range($scope.skills.length).map(function (i) {
			return {
				radius: $scope.skills[i].level * 18 + 14,
				label: $scope.skills[i].name,
				skillLevel: $scope.skills[i].level,
				bgColor: $scope.skills[i].color
			};
		});

		var root = nodes[0];
		root.radius = 0;
		root.fixed = true;

		var groups = svg.selectAll("g").data(nodes.slice(1)).enter().append("g");

		var circles = groups.append('circle').data(nodes.slice(1)).attr("r", function (d) {
			return d.radius;
		}).style("fill", function (d, i) {
			return d.bgColor;
		});

		var label = groups.append("text").text(function (d) {
			return d.label;
		}).attr({
			"alignment-baseline": "middle",
			"text-anchor": "middle"
		});

		force.gravity(0.05).charge(function (d, i) {
			return i ? 0 : -3000;
		}).nodes(nodes).size([width - 200, height - 300]);

		force.start();
		stopped = false;

		force.on("tick", function (e) {
			var q = d3.geom.quadtree(nodes),
			    i = 0,
			    n = nodes.length;

			while (++i < n) q.visit(collide(nodes[i]));

			//move circles
			svg.selectAll("circle").attr("cx", function (d) {
				return d.x;
			}).attr("cy", function (d) {
				return d.y;
			});

			//move labels
			svg.selectAll("text").attr("x", function (d) {
				return d.x;
			}).attr("y", function (d) {
				return d.y;
			});
		});

		svg.on("mousemove", function () {
			var p1 = d3.mouse(this);
			root.px = p1[0];
			root.py = p1[1];
			force.resume();
		});

		//So they don't all start out in a straight line
		root.px = 1;
		root.py = 1;

		function collide(node) {
			var r = node.radius + 16,
			    nx1 = node.x - r,
			    nx2 = node.x + r,
			    ny1 = node.y - r,
			    ny2 = node.y + r;
			return function (quad, x1, y1, x2, y2) {
				if (quad.point && quad.point !== node) {
					var x = node.x - quad.point.x,
					    y = node.y - quad.point.y,
					    l = Math.sqrt(x * x + y * y),
					    r = node.radius + quad.point.radius;

					if (l < r) {
						l = (l - r) / l * 0.5;
						node.x -= x *= l;
						node.y -= y *= l;
						quad.point.x += x;
						quad.point.y += y;
					}
				}
				return x1 > nx2 || x2 < nx1 || y1 > ny2 || y2 < ny1;
			};
		}
	}
	// });

	if (theWindow.width() > 1074) {
		initializeSkillsCloud();
	}

	theWindow.resize(function () {
		console.log(theWindow);
		var top = window.pageYOffset || document.documentElement.scrollTop;
		console.log("TOP: ", top);
		console.log($('html,body').scrollTop());
		if (theWindow.width() > 1074) {
			$('html,body').scrollTop(0);
			console.log('snapping back to top');
			//start / restart mouseover listener if stopped
			if (stopped) {
				initializeSkillsCloud();
			}
		} else {
			force.stop();
		}
	});
});

app.controller('contactCtrl', function ($scope, $http) {
	$scope.formData = {};

	$scope.sendMail = function () {
		$scope.waiting = true;
		$scope.sent = false;
		$scope.success = false;
		$http.post('/api/contact', $scope.formData).then(function (successResponse) {
			$scope.waiting = false;
			$scope.sent = true;
			$scope.success = successResponse.data;
			$scope.formData = {};
		});
	};
	//
	var resumeLabel = $('#resume');
	var overlay = $('#overlay');
	var resume = $('#resume-container');

	resumeLabel.click(function () {
		overlay.css({ 'opacity': '.7', 'z-index': '1' });
		resume.css({ 'display': 'block' });
	});
	overlay.click(function () {
		overlay.css({ 'opacity': '0', 'z-index': '-1' });
		resume.css({ 'display': 'none' });
	});

	// var card = $('#card');
	// var note = $('.note');
	// var arrow = $('#arrow');
	// var toggle = true;

	// arrow.click(function(){
	// 	if (toggle){
	// 		card.removeClass('hidden').removeClass('initial').addClass('visible');
	// 		// arrow.css({'display' : 'none'});
	//
	//
	// 		// note.css({'display': 'initial'});
	// 		setTimeout(explode, 500);
	// 		setTimeout(function(){
	// 			$('#canvas').css({'display' : 'none'});
	// 			// arrow.css({'display' : 'initial'});
	//
	// 		}, 4000);
	// 	} else {
	// 		card.removeClass('visible').addClass('hidden');
	//
	//
	// 		// note.css({'display': 'none'});
	// 	}
	// 	toggle = !toggle;
	// });

	function explode() {

		$('#canvas').css({ 'display': 'initial' });

		var requestId;

		var canvas = document.getElementById("canvas"),
		    context = canvas.getContext("2d"),
		    width = canvas.width = window.innerWidth,
		    height = canvas.height = window.innerHeight,
		    particle = [],
		    particleCount = 0,
		    gravity = 0.3,
		    colors =
		// [
		// 	'#f44336', '#e91e63', '#9c27b0', '#673ab7', '#3f51b5',
		// 	'#2196f3', '#03a9f4', '#00bcd4', '#009688', '#4CAF50',
		// 	'#8BC34A', '#CDDC39', '#FFEB3B', '#FFC107', '#FF9800',
		// 	'#FF5722', '#795548'
		// ];
		['#7FFFD4', '#E0FFFF', '#33CCFF', '#C688E8', '#FF807D', '#FF8EB2'];

		for (var i = 0; i < 50; i++) {
			particle.push({
				x: width / 2,
				y: height / 2,
				boxW: randomRange(5, 20),
				boxH: randomRange(5, 20),
				size: randomRange(2, 8),

				spikeran: randomRange(3, 5),

				velX: randomRange(-8, 8),
				velY: randomRange(-50, -10),

				angle: convertToRadians(randomRange(0, 360)),
				color: colors[Math.floor(Math.random() * colors.length)],
				anglespin: randomRange(-0.2, 0.2),

				draw: draw
			});
		}

		var r1 = {
			x: width / 2 - 150,
			y: height / 2 - 150,
			width: 300,
			height: 300,
			velX: 0,
			velY: -10,
			alphatop: 0
		};

		function drawScreen() {
			var size = 50;
			if (r1.alphatop < 1) {
				r1.alphatop += 0.01;
			} else {
				r1.alphatop = 1;
			}
			context.globalAlpha = r1.alphatop;

			if (r1.alphatop === 1) {
				r1.velY *= 0.999;
				r1.velY += 0.3;
				r1.x += r1.velX;
				r1.y += r1.velY;
			}

			if (r1.y + r1.height > height) {
				r1.anglespin = 0;
				r1.y = height - r1.height;
				r1.velY *= -0.8;
				r1.velX *= 0.9;
			}

			context.globalAlpha = 1;

			for (var i = 0; i < particle.length; i++) {
				particle[i].draw();
			}
		}

		function update() {
			context.clearRect(0, 0, width, height);
			drawScreen();
			requestId = requestAnimationFrame(update);
		}

		update();

		setTimeout(function () {
			window.cancelAnimationFrame(requestId);
			requestId = undefined;
		}, 5000);

		function randomRange(min, max) {
			return min + Math.random() * (max - min);
		}

		function randomInt(min, max) {
			return Math.floor(min + Math.random() * (max - min + 1));
		}

		function convertToRadians(degree) {
			return degree * (Math.PI / 180);
		}

		function drawStar(cx, cy, spikes, outerRadius, innerRadius, color) {
			var rot = Math.PI / 2 * 3;
			var x = cx;
			var y = cy;
			var step = Math.PI / spikes;

			context.strokeSyle = "#000";
			context.beginPath();
			context.moveTo(cx, cy - outerRadius);
			for (i = 0; i < spikes; i++) {
				x = cx + Math.cos(rot) * outerRadius;
				y = cy + Math.sin(rot) * outerRadius;
				context.lineTo(x, y);
				rot += step;

				x = cx + Math.cos(rot) * innerRadius;
				y = cy + Math.sin(rot) * innerRadius;
				context.lineTo(x, y);
				rot += step;
			}

			context.lineTo(cx, cy - outerRadius);
			context.closePath();
			context.fillStyle = color;
			context.fill();
		}

		function draw() {
			context.save();
			context.translate(this.x, this.y);
			context.rotate(this.angle);
			context.fillStyle = this.color;
			context.beginPath();
			// drawStar(0, 0, 5, this.boxW, this.boxH);
			context.fillRect(this.boxW / 2 * -1, this.boxH / 2 * -1, this.boxW, this.boxH);
			context.fill();
			context.closePath();
			context.restore();
			this.angle += this.anglespin;
			this.velY *= 0.999;
			this.velY += 0.3;
			this.x += this.velX;
			this.y += this.velY;

			if (this.y < 0) {
				this.velY *= -0.2;
				this.velX *= 0.9;
			}
			if (this.y > height) {
				this.anglespin = 0;
				this.y = height;
				this.velY *= -0.2;
				this.velX *= 0.9;
			}
			if (this.x > width || this.x < 0) {
				this.velX *= -0.5;
			}
		}
	}
});

app.config(function ($stateProvider) {
	$stateProvider.state('home', {
		url: '/',
		templateUrl: '/js/templates/home.html',
		controller: 'homeCtrl'
	}).state('projects', {
		url: '/projects',
		templateUrl: '/js/templates/projects.html',
		controller: 'projectCtrl'
	}).state('about', {
		url: '/about',
		templateUrl: '/js/templates/about.html',
		controller: 'aboutCtrl'
	}).state('contact', {
		url: '/contact',
		templateUrl: '/js/templates/contact.html',
		controller: 'contactCtrl'
	});
});

app.controller('mainCtrl', function () {});

app.controller('homeCtrl', function () {
	var increment = 0;
	var carousel = $('#carousel');
	var current = '#fig-1';
	var prev;
	var theWindow = $(window);
	var interval;

	if (theWindow.width() > 768) {
		interval = setInterval(rotate, 1500);
	}
	theWindow.resize(function () {
		clearInterval(interval);
		if (theWindow.width() > 768) {
			$('html,body').scrollTop(0);
			interval = setInterval(rotate, 1500);
		}
	});

	function rotate() {
		increment++;
		carousel.css({ '-webkit-transform': 'rotateX(' + increment * -60 + 'deg)' });
		carousel.attr('data-state', increment % 6 + 1);
		prev = current;
		current = '#fig-' + (increment % 6 + 1);
	}
});

app.controller('projectCtrl', function ($scope) {
	var theWindow = $(window);

	function initializeSkew() {
		$(document).ready(function () {

			var curPage = 1;
			var numOfPages = $(".skw-page").length;
			var animTime = 1000;
			var scrolling = false;
			var pgPrefix = ".skw-page-";
			var progPrefix = "#p";

			function pagination() {
				scrolling = true;

				$(pgPrefix + curPage).removeClass("inactive").addClass("active");
				// $(progPrefix + curPage).addClass("current");
				setTimeout(function () {
					scrolling = false;
				}, animTime);
			}

			function navigateUp() {
				if (curPage === 1) return;
				curPage--;
				$(pgPrefix + (curPage + 1)).removeClass("active");
				// $(progPrefix + (curPage + 1)).removeClass("current");

				pagination();
			}

			function navigateDown() {
				if (curPage === numOfPages) return;
				curPage++;
				$(pgPrefix + (curPage - 1)).addClass("inactive");
				// $(progPrefix + (curPage -1)).removeClass("current");
				pagination();
			}

			$(document).on("mousewheel DOMMouseScroll", function (e) {
				if (scrolling) return;
				if (e.originalEvent.wheelDelta > 0 || e.originalEvent.detail < 0) {
					navigateUp();
				} else {
					navigateDown();
				}
			});

			$(document).on("keydown", function (e) {
				if (scrolling) return;
				if (e.which === 38) {
					navigateUp();
				} else if (e.which === 40) {
					navigateDown();
				}
			});
		});
	}
	if (theWindow.width() > 768) {
		initializeSkew();
	}
});

app.directive('projectsMobile', function () {
	return {
		restrict: 'E',
		templateUrl: '/js/directives/projects-mobile.html'
	};
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsImFib3V0LmpzIiwiY29udGFjdC5qcyIsImhvbWUuanMiLCJwcm9qZWN0LmpzIiwiZGlyZWN0aXZlcy9wcm9qZWN0cy1tb2JpbGUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EsTUFBQSxDQUFBLEdBQUEsR0FBQSxPQUFBLENBQUEsTUFBQSxDQUFBLFdBQUEsRUFBQSxDQUFBLFdBQUEsQ0FBQSxDQUFBLENBQUE7O0FBR0EsR0FBQSxDQUFBLE1BQUEsQ0FBQSxVQUFBLGtCQUFBLEVBQUEsaUJBQUEsRUFBQSwwQkFBQSxFQUFBOzs7QUFHQSxtQkFBQSxDQUFBLElBQUEsQ0FBQSxVQUFBLFNBQUEsRUFBQSxTQUFBLEVBQUE7O0FBRUEsTUFBQSxFQUFBLEdBQUEsbUJBQUEsQ0FBQTtBQUNBLE1BQUEsSUFBQSxHQUFBLFNBQUEsQ0FBQSxHQUFBLEVBQUEsQ0FBQTs7QUFFQSxNQUFBLEVBQUEsQ0FBQSxJQUFBLENBQUEsSUFBQSxDQUFBLEVBQUE7QUFDQSxVQUFBLElBQUEsQ0FBQSxPQUFBLENBQUEsRUFBQSxFQUFBLE1BQUEsQ0FBQSxDQUFBO0dBQ0E7O0FBRUEsU0FBQSxLQUFBLENBQUE7RUFDQSxDQUFBOztBQUFBLEFBRUEsa0JBQUEsQ0FBQSxTQUFBLENBQUEsSUFBQSxDQUFBLENBQUE7QUFDQSxtQkFBQSxDQUFBLElBQUEsQ0FBQSxpQkFBQSxFQUFBLFlBQUE7QUFDQSxRQUFBLENBQUEsUUFBQSxDQUFBLE1BQUEsRUFBQSxDQUFBO0VBQ0EsQ0FBQTs7QUFBQSxBQUVBLG1CQUFBLENBQUEsU0FBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBO0NBQ0EsQ0FBQSxDQUFBOztBQ3pCQSxHQUFBLENBQUEsVUFBQSxDQUFBLFdBQUEsRUFBQSxVQUFBLE1BQUEsRUFBQTtBQUNBLEtBQUEsU0FBQSxHQUFBLENBQUEsQ0FBQSxNQUFBLENBQUEsQ0FBQTtBQUNBLEtBQUEsS0FBQSxHQUFBLEVBQUEsQ0FBQSxNQUFBLENBQUEsS0FBQSxFQUFBLENBQUE7QUFDQSxLQUFBLE9BQUEsR0FBQSxJQUFBOzs7QUFBQSxBQUdBLE9BQUEsQ0FBQSxNQUFBLEdBQUEsQ0FDQSxFQUFBLElBQUEsRUFBQSxZQUFBLEVBQUEsS0FBQSxFQUFBLENBQUEsRUFBQSxFQUNBLEVBQUEsSUFBQSxFQUFBLFNBQUEsRUFBQSxLQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQ0EsRUFBQSxJQUFBLEVBQUEsWUFBQSxFQUFBLEtBQUEsRUFBQSxDQUFBLEVBQUEsRUFDQSxFQUFBLElBQUEsRUFBQSxZQUFBLEVBQUEsS0FBQSxFQUFBLENBQUEsRUFBQSxFQUNBLEVBQUEsSUFBQSxFQUFBLFNBQUEsRUFBQSxLQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQ0EsRUFBQSxJQUFBLEVBQUEsYUFBQSxFQUFBLEtBQUEsRUFBQSxDQUFBLEVBQUEsRUFDQSxFQUFBLElBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLENBQUEsRUFBQSxFQUNBLEVBQUEsSUFBQSxFQUFBLE1BQUEsRUFBQSxLQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQ0EsRUFBQSxJQUFBLEVBQUEsT0FBQSxFQUFBLEtBQUEsRUFBQSxDQUFBLEVBQUEsRUFDQSxFQUFBLElBQUEsRUFBQSxrQkFBQSxFQUFBLEtBQUEsRUFBQSxDQUFBLEVBQUEsRUFDQSxFQUFBLElBQUEsRUFBQSxNQUFBLEVBQUEsS0FBQSxFQUFBLENBQUEsRUFBQSxFQUNBLEVBQUEsSUFBQSxFQUFBLGNBQUEsRUFBQSxLQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQ0EsRUFBQSxJQUFBLEVBQUEsUUFBQSxFQUFBLEtBQUEsRUFBQSxDQUFBLEVBQUEsRUFDQSxFQUFBLElBQUEsRUFBQSxXQUFBLEVBQUEsS0FBQSxFQUFBLENBQUEsRUFBQSxFQUNBLEVBQUEsSUFBQSxFQUFBLFdBQUEsRUFBQSxLQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQ0EsRUFBQSxJQUFBLEVBQUEsbUJBQUEsRUFBQSxLQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQ0EsRUFBQSxJQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxDQUFBLEVBQUEsRUFDQSxFQUFBLElBQUEsRUFBQSxZQUFBLEVBQUEsS0FBQSxFQUFBLENBQUEsRUFBQSxFQUNBLEVBQUEsSUFBQSxFQUFBLE1BQUEsRUFBQSxLQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQ0EsRUFBQSxJQUFBLEVBQUEsTUFBQSxFQUFBLEtBQUEsRUFBQSxDQUFBLEVBQUEsRUFDQSxFQUFBLElBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLENBQUEsRUFBQSxDQUNBLENBQUE7O0FBRUEsT0FBQSxDQUFBLE1BQUEsR0FBQSxDQUNBLFNBQUEsRUFDQSxTQUFBLEVBQ0EsU0FBQSxFQUNBLFNBQUEsRUFDQSxTQUFBLEVBQ0EsU0FBQSxDQUNBLENBQUE7O0FBRUEsT0FBQSxDQUFBLE1BQUEsQ0FBQSxHQUFBLENBQUEsVUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBO0FBQ0EsR0FBQSxDQUFBLEtBQUEsR0FBQSxNQUFBLENBQUEsTUFBQSxDQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsQ0FBQTtFQUNBLENBQUEsQ0FBQTtBQUNBLFVBQUEscUJBQUEsR0FBQTtBQUNBLE1BQUEsV0FBQSxHQUFBLENBQUEsQ0FBQSxlQUFBLENBQUEsQ0FBQTtBQUNBLE1BQUEsS0FBQSxHQUFBLFdBQUEsQ0FBQSxLQUFBLEVBQUEsQ0FBQTtBQUNBLE1BQUEsTUFBQSxHQUFBLFdBQUEsQ0FBQSxNQUFBLEVBQUEsQ0FBQTtBQUNBLE1BQUEsR0FBQSxHQUFBLEVBQUEsQ0FBQSxNQUFBLENBQUEsZUFBQSxDQUFBLENBQUEsTUFBQSxDQUFBLEtBQUEsQ0FBQTs7O0FBQUEsQUFJQSxNQUFBLEtBQUEsR0FBQSxFQUFBLENBQUEsS0FBQSxDQUFBLE1BQUEsQ0FBQSxNQUFBLENBQUEsTUFBQSxDQUFBLENBQUEsR0FBQSxDQUFBLFVBQUEsQ0FBQSxFQUFBO0FBQ0EsVUFBQTtBQUNBLFVBQUEsRUFBQSxNQUFBLENBQUEsTUFBQSxDQUFBLENBQUEsQ0FBQSxDQUFBLEtBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQTtBQUNBLFNBQUEsRUFBQSxNQUFBLENBQUEsTUFBQSxDQUFBLENBQUEsQ0FBQSxDQUFBLElBQUE7QUFDQSxjQUFBLEVBQUEsTUFBQSxDQUFBLE1BQUEsQ0FBQSxDQUFBLENBQUEsQ0FBQSxLQUFBO0FBQ0EsV0FBQSxFQUFBLE1BQUEsQ0FBQSxNQUFBLENBQUEsQ0FBQSxDQUFBLENBQUEsS0FBQTtJQUNBLENBQUE7R0FDQSxDQUFBLENBQUE7O0FBRUEsTUFBQSxJQUFBLEdBQUEsS0FBQSxDQUFBLENBQUEsQ0FBQSxDQUFBO0FBQ0EsTUFBQSxDQUFBLE1BQUEsR0FBQSxDQUFBLENBQUE7QUFDQSxNQUFBLENBQUEsS0FBQSxHQUFBLElBQUEsQ0FBQTs7QUFFQSxNQUFBLE1BQUEsR0FBQSxHQUFBLENBQUEsU0FBQSxDQUFBLEdBQUEsQ0FBQSxDQUNBLElBQUEsQ0FBQSxLQUFBLENBQUEsS0FBQSxDQUFBLENBQUEsQ0FBQSxDQUFBLENBQ0EsS0FBQSxFQUFBLENBQ0EsTUFBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBOztBQUVBLE1BQUEsT0FBQSxHQUFBLE1BQUEsQ0FBQSxNQUFBLENBQUEsUUFBQSxDQUFBLENBQ0EsSUFBQSxDQUFBLEtBQUEsQ0FBQSxLQUFBLENBQUEsQ0FBQSxDQUFBLENBQUEsQ0FDQSxJQUFBLENBQUEsR0FBQSxFQUFBLFVBQUEsQ0FBQSxFQUFBO0FBQUEsVUFBQSxDQUFBLENBQUEsTUFBQSxDQUFBO0dBQUEsQ0FBQSxDQUNBLEtBQUEsQ0FBQSxNQUFBLEVBQUEsVUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBO0FBQUEsVUFBQSxDQUFBLENBQUEsT0FBQSxDQUFBO0dBQUEsQ0FBQSxDQUFBOztBQUVBLE1BQUEsS0FBQSxHQUFBLE1BQUEsQ0FBQSxNQUFBLENBQUEsTUFBQSxDQUFBLENBQ0EsSUFBQSxDQUFBLFVBQUEsQ0FBQSxFQUFBO0FBQUEsVUFBQSxDQUFBLENBQUEsS0FBQSxDQUFBO0dBQUEsQ0FBQSxDQUNBLElBQUEsQ0FBQTtBQUNBLHVCQUFBLEVBQUEsUUFBQTtBQUNBLGdCQUFBLEVBQUEsUUFBQTtHQUNBLENBQUEsQ0FBQTs7QUFHQSxPQUFBLENBQUEsT0FBQSxDQUFBLElBQUEsQ0FBQSxDQUNBLE1BQUEsQ0FBQSxVQUFBLENBQUEsRUFBQSxDQUFBLEVBQUE7QUFBQSxVQUFBLENBQUEsR0FBQSxDQUFBLEdBQUEsQ0FBQSxJQUFBLENBQUE7R0FBQSxDQUFBLENBQ0EsS0FBQSxDQUFBLEtBQUEsQ0FBQSxDQUNBLElBQUEsQ0FBQSxDQUFBLEtBQUEsR0FBQSxHQUFBLEVBQUEsTUFBQSxHQUFBLEdBQUEsQ0FBQSxDQUFBLENBQUE7O0FBRUEsT0FBQSxDQUFBLEtBQUEsRUFBQSxDQUFBO0FBQ0EsU0FBQSxHQUFBLEtBQUEsQ0FBQTs7QUFFQSxPQUFBLENBQUEsRUFBQSxDQUFBLE1BQUEsRUFBQSxVQUFBLENBQUEsRUFBQTtBQUNBLE9BQUEsQ0FBQSxHQUFBLEVBQUEsQ0FBQSxJQUFBLENBQUEsUUFBQSxDQUFBLEtBQUEsQ0FBQTtPQUNBLENBQUEsR0FBQSxDQUFBO09BQ0EsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxNQUFBLENBQUE7O0FBRUEsVUFBQSxFQUFBLENBQUEsR0FBQSxDQUFBLEVBQUEsQ0FBQSxDQUFBLEtBQUEsQ0FBQSxPQUFBLENBQUEsS0FBQSxDQUFBLENBQUEsQ0FBQSxDQUFBLENBQUEsQ0FBQTs7O0FBQUEsQUFHQSxNQUFBLENBQUEsU0FBQSxDQUFBLFFBQUEsQ0FBQSxDQUNBLElBQUEsQ0FBQSxJQUFBLEVBQUEsVUFBQSxDQUFBLEVBQUE7QUFBQSxXQUFBLENBQUEsQ0FBQSxDQUFBLENBQUE7SUFBQSxDQUFBLENBQ0EsSUFBQSxDQUFBLElBQUEsRUFBQSxVQUFBLENBQUEsRUFBQTtBQUFBLFdBQUEsQ0FBQSxDQUFBLENBQUEsQ0FBQTtJQUFBLENBQUE7OztBQUFBLEFBR0EsTUFBQSxDQUFBLFNBQUEsQ0FBQSxNQUFBLENBQUEsQ0FDQSxJQUFBLENBQUEsR0FBQSxFQUFBLFVBQUEsQ0FBQSxFQUFBO0FBQUEsV0FBQSxDQUFBLENBQUEsQ0FBQSxDQUFBO0lBQUEsQ0FBQSxDQUNBLElBQUEsQ0FBQSxHQUFBLEVBQUEsVUFBQSxDQUFBLEVBQUE7QUFBQSxXQUFBLENBQUEsQ0FBQSxDQUFBLENBQUE7SUFBQSxDQUFBLENBQUE7R0FDQSxDQUFBLENBQUE7O0FBRUEsS0FBQSxDQUFBLEVBQUEsQ0FBQSxXQUFBLEVBQUEsWUFBQTtBQUNBLE9BQUEsRUFBQSxHQUFBLEVBQUEsQ0FBQSxLQUFBLENBQUEsSUFBQSxDQUFBLENBQUE7QUFDQSxPQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsQ0FBQSxDQUFBLENBQUEsQ0FBQTtBQUNBLE9BQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxDQUFBLENBQUEsQ0FBQSxDQUFBO0FBQ0EsUUFBQSxDQUFBLE1BQUEsRUFBQSxDQUFBO0dBQ0EsQ0FBQTs7O0FBQUEsQUFHQSxNQUFBLENBQUEsRUFBQSxHQUFBLENBQUEsQ0FBQTtBQUNBLE1BQUEsQ0FBQSxFQUFBLEdBQUEsQ0FBQSxDQUFBOztBQUVBLFdBQUEsT0FBQSxDQUFBLElBQUEsRUFBQTtBQUNBLE9BQUEsQ0FBQSxHQUFBLElBQUEsQ0FBQSxNQUFBLEdBQUEsRUFBQTtPQUNBLEdBQUEsR0FBQSxJQUFBLENBQUEsQ0FBQSxHQUFBLENBQUE7T0FDQSxHQUFBLEdBQUEsSUFBQSxDQUFBLENBQUEsR0FBQSxDQUFBO09BQ0EsR0FBQSxHQUFBLElBQUEsQ0FBQSxDQUFBLEdBQUEsQ0FBQTtPQUNBLEdBQUEsR0FBQSxJQUFBLENBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQTtBQUNBLFVBQUEsVUFBQSxJQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBO0FBQ0EsUUFBQSxJQUFBLENBQUEsS0FBQSxJQUFBLElBQUEsQ0FBQSxLQUFBLEtBQUEsSUFBQSxFQUFBO0FBQ0EsU0FBQSxDQUFBLEdBQUEsSUFBQSxDQUFBLENBQUEsR0FBQSxJQUFBLENBQUEsS0FBQSxDQUFBLENBQUE7U0FDQSxDQUFBLEdBQUEsSUFBQSxDQUFBLENBQUEsR0FBQSxJQUFBLENBQUEsS0FBQSxDQUFBLENBQUE7U0FDQSxDQUFBLEdBQUEsSUFBQSxDQUFBLElBQUEsQ0FBQSxDQUFBLEdBQUEsQ0FBQSxHQUFBLENBQUEsR0FBQSxDQUFBLENBQUE7U0FDQSxDQUFBLEdBQUEsSUFBQSxDQUFBLE1BQUEsR0FBQSxJQUFBLENBQUEsS0FBQSxDQUFBLE1BQUEsQ0FBQTs7QUFFQSxTQUFBLENBQUEsR0FBQSxDQUFBLEVBQUE7QUFDQSxPQUFBLEdBQUEsQ0FBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBLEdBQUEsQ0FBQSxHQUFBLEdBQUEsQ0FBQTtBQUNBLFVBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBQSxJQUFBLENBQUEsQ0FBQTtBQUNBLFVBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBQSxJQUFBLENBQUEsQ0FBQTtBQUNBLFVBQUEsQ0FBQSxLQUFBLENBQUEsQ0FBQSxJQUFBLENBQUEsQ0FBQTtBQUNBLFVBQUEsQ0FBQSxLQUFBLENBQUEsQ0FBQSxJQUFBLENBQUEsQ0FBQTtNQUNBO0tBQ0E7QUFDQSxXQUFBLEVBQUEsR0FBQSxHQUFBLElBQUEsRUFBQSxHQUFBLEdBQUEsSUFBQSxFQUFBLEdBQUEsR0FBQSxJQUFBLEVBQUEsR0FBQSxHQUFBLENBQUE7SUFDQSxDQUFBO0dBQ0E7RUFDQTs7O0FBQUEsQUFHQSxLQUFBLFNBQUEsQ0FBQSxLQUFBLEVBQUEsR0FBQSxJQUFBLEVBQUE7QUFDQSx1QkFBQSxFQUFBLENBQUE7RUFDQTs7QUFFQSxVQUFBLENBQUEsTUFBQSxDQUFBLFlBQUE7QUFDQSxTQUFBLENBQUEsR0FBQSxDQUFBLFNBQUEsQ0FBQSxDQUFBO0FBQ0EsTUFBQSxHQUFBLEdBQUEsTUFBQSxDQUFBLFdBQUEsSUFBQSxRQUFBLENBQUEsZUFBQSxDQUFBLFNBQUEsQ0FBQTtBQUNBLFNBQUEsQ0FBQSxHQUFBLENBQUEsT0FBQSxFQUFBLEdBQUEsQ0FBQSxDQUFBO0FBQ0EsU0FBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBLENBQUEsV0FBQSxDQUFBLENBQUEsU0FBQSxFQUFBLENBQUEsQ0FBQTtBQUNBLE1BQUEsU0FBQSxDQUFBLEtBQUEsRUFBQSxHQUFBLElBQUEsRUFBQTtBQUNBLElBQUEsQ0FBQSxXQUFBLENBQUEsQ0FBQSxTQUFBLENBQUEsQ0FBQSxDQUFBLENBQUE7QUFDQSxVQUFBLENBQUEsR0FBQSxDQUFBLHNCQUFBLENBQUE7O0FBQUEsQUFFQSxPQUFBLE9BQUEsRUFBQTtBQUNBLHlCQUFBLEVBQUEsQ0FBQTtJQUNBO0dBQ0EsTUFBQTtBQUNBLFFBQUEsQ0FBQSxJQUFBLEVBQUEsQ0FBQTtHQUNBO0VBQ0EsQ0FBQSxDQUFBO0NBQ0EsQ0FBQSxDQUFBOztBQ3JLQSxHQUFBLENBQUEsVUFBQSxDQUFBLGFBQUEsRUFBQSxVQUFBLE1BQUEsRUFBQSxLQUFBLEVBQUE7QUFDQSxPQUFBLENBQUEsUUFBQSxHQUFBLEVBQUEsQ0FBQTs7QUFFQSxPQUFBLENBQUEsUUFBQSxHQUFBLFlBQUE7QUFDQSxRQUFBLENBQUEsT0FBQSxHQUFBLElBQUEsQ0FBQTtBQUNBLFFBQUEsQ0FBQSxJQUFBLEdBQUEsS0FBQSxDQUFBO0FBQ0EsUUFBQSxDQUFBLE9BQUEsR0FBQSxLQUFBLENBQUE7QUFDQSxPQUFBLENBQUEsSUFBQSxDQUFBLGNBQUEsRUFBQSxNQUFBLENBQUEsUUFBQSxDQUFBLENBQ0EsSUFBQSxDQUFBLFVBQUEsZUFBQSxFQUFBO0FBQ0EsU0FBQSxDQUFBLE9BQUEsR0FBQSxLQUFBLENBQUE7QUFDQSxTQUFBLENBQUEsSUFBQSxHQUFBLElBQUEsQ0FBQTtBQUNBLFNBQUEsQ0FBQSxPQUFBLEdBQUEsZUFBQSxDQUFBLElBQUEsQ0FBQTtBQUNBLFNBQUEsQ0FBQSxRQUFBLEdBQUEsRUFBQSxDQUFBO0dBQ0EsQ0FBQSxDQUFBO0VBQ0E7O0FBQUEsQUFFQSxLQUFBLFdBQUEsR0FBQSxDQUFBLENBQUEsU0FBQSxDQUFBLENBQUE7QUFDQSxLQUFBLE9BQUEsR0FBQSxDQUFBLENBQUEsVUFBQSxDQUFBLENBQUE7QUFDQSxLQUFBLE1BQUEsR0FBQSxDQUFBLENBQUEsbUJBQUEsQ0FBQSxDQUFBOztBQUVBLFlBQUEsQ0FBQSxLQUFBLENBQUEsWUFBQTtBQUNBLFNBQUEsQ0FBQSxHQUFBLENBQUEsRUFBQSxTQUFBLEVBQUEsSUFBQSxFQUFBLFNBQUEsRUFBQSxHQUFBLEVBQUEsQ0FBQSxDQUFBO0FBQ0EsUUFBQSxDQUFBLEdBQUEsQ0FBQSxFQUFBLFNBQUEsRUFBQSxPQUFBLEVBQUEsQ0FBQSxDQUFBO0VBRUEsQ0FBQSxDQUFBO0FBQ0EsUUFBQSxDQUFBLEtBQUEsQ0FBQSxZQUFBO0FBQ0EsU0FBQSxDQUFBLEdBQUEsQ0FBQSxFQUFBLFNBQUEsRUFBQSxHQUFBLEVBQUEsU0FBQSxFQUFBLElBQUEsRUFBQSxDQUFBLENBQUE7QUFDQSxRQUFBLENBQUEsR0FBQSxDQUFBLEVBQUEsU0FBQSxFQUFBLE1BQUEsRUFBQSxDQUFBLENBQUE7RUFDQSxDQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLEFBOEJBLFVBQUEsT0FBQSxHQUFBOztBQUVBLEdBQUEsQ0FBQSxTQUFBLENBQUEsQ0FBQSxHQUFBLENBQUEsRUFBQSxTQUFBLEVBQUEsU0FBQSxFQUFBLENBQUEsQ0FBQTs7QUFFQSxNQUFBLFNBQUEsQ0FBQTs7QUFFQSxNQUFBLE1BQUEsR0FBQSxRQUFBLENBQUEsY0FBQSxDQUFBLFFBQUEsQ0FBQTtNQUNBLE9BQUEsR0FBQSxNQUFBLENBQUEsVUFBQSxDQUFBLElBQUEsQ0FBQTtNQUNBLEtBQUEsR0FBQSxNQUFBLENBQUEsS0FBQSxHQUFBLE1BQUEsQ0FBQSxVQUFBO01BQ0EsTUFBQSxHQUFBLE1BQUEsQ0FBQSxNQUFBLEdBQUEsTUFBQSxDQUFBLFdBQUE7TUFDQSxRQUFBLEdBQUEsRUFBQTtNQUNBLGFBQUEsR0FBQSxDQUFBO01BQ0EsT0FBQSxHQUFBLEdBQUE7TUFDQSxNQUFBOzs7Ozs7O0FBT0EsR0FBQSxTQUFBLEVBQUEsU0FBQSxFQUFBLFNBQUEsRUFBQSxTQUFBLEVBQUEsU0FBQSxFQUFBLFNBQUEsQ0FBQSxDQUFBOztBQUVBLE9BQUEsSUFBQSxDQUFBLEdBQUEsQ0FBQSxFQUFBLENBQUEsR0FBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUE7QUFDQSxXQUFBLENBQUEsSUFBQSxDQUFBO0FBQ0EsS0FBQSxFQUFBLEtBQUEsR0FBQSxDQUFBO0FBQ0EsS0FBQSxFQUFBLE1BQUEsR0FBQSxDQUFBO0FBQ0EsUUFBQSxFQUFBLFdBQUEsQ0FBQSxDQUFBLEVBQUEsRUFBQSxDQUFBO0FBQ0EsUUFBQSxFQUFBLFdBQUEsQ0FBQSxDQUFBLEVBQUEsRUFBQSxDQUFBO0FBQ0EsUUFBQSxFQUFBLFdBQUEsQ0FBQSxDQUFBLEVBQUEsQ0FBQSxDQUFBOztBQUVBLFlBQUEsRUFBQSxXQUFBLENBQUEsQ0FBQSxFQUFBLENBQUEsQ0FBQTs7QUFFQSxRQUFBLEVBQUEsV0FBQSxDQUFBLENBQUEsQ0FBQSxFQUFBLENBQUEsQ0FBQTtBQUNBLFFBQUEsRUFBQSxXQUFBLENBQUEsQ0FBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUE7O0FBRUEsU0FBQSxFQUFBLGdCQUFBLENBQUEsV0FBQSxDQUFBLENBQUEsRUFBQSxHQUFBLENBQUEsQ0FBQTtBQUNBLFNBQUEsRUFBQSxNQUFBLENBQUEsSUFBQSxDQUFBLEtBQUEsQ0FBQSxJQUFBLENBQUEsTUFBQSxFQUFBLEdBQUEsTUFBQSxDQUFBLE1BQUEsQ0FBQSxDQUFBO0FBQ0EsYUFBQSxFQUFBLFdBQUEsQ0FBQSxDQUFBLEdBQUEsRUFBQSxHQUFBLENBQUE7O0FBRUEsUUFBQSxFQUFBLElBQUE7SUFDQSxDQUFBLENBQUE7R0FDQTs7QUFFQSxNQUFBLEVBQUEsR0FBQTtBQUNBLElBQUEsRUFBQSxLQUFBLEdBQUEsQ0FBQSxHQUFBLEdBQUE7QUFDQSxJQUFBLEVBQUEsTUFBQSxHQUFBLENBQUEsR0FBQSxHQUFBO0FBQ0EsUUFBQSxFQUFBLEdBQUE7QUFDQSxTQUFBLEVBQUEsR0FBQTtBQUNBLE9BQUEsRUFBQSxDQUFBO0FBQ0EsT0FBQSxFQUFBLENBQUEsRUFBQTtBQUNBLFdBQUEsRUFBQSxDQUFBO0dBQ0EsQ0FBQTs7QUFHQSxXQUFBLFVBQUEsR0FBQTtBQUNBLE9BQUEsSUFBQSxHQUFBLEVBQUEsQ0FBQTtBQUNBLE9BQUEsRUFBQSxDQUFBLFFBQUEsR0FBQSxDQUFBLEVBQUE7QUFDQSxNQUFBLENBQUEsUUFBQSxJQUFBLElBQUEsQ0FBQTtJQUNBLE1BQUE7QUFDQSxNQUFBLENBQUEsUUFBQSxHQUFBLENBQUEsQ0FBQTtJQUNBO0FBQ0EsVUFBQSxDQUFBLFdBQUEsR0FBQSxFQUFBLENBQUEsUUFBQSxDQUFBOztBQUVBLE9BQUEsRUFBQSxDQUFBLFFBQUEsS0FBQSxDQUFBLEVBQUE7QUFDQSxNQUFBLENBQUEsSUFBQSxJQUFBLEtBQUEsQ0FBQTtBQUNBLE1BQUEsQ0FBQSxJQUFBLElBQUEsR0FBQSxDQUFBO0FBQ0EsTUFBQSxDQUFBLENBQUEsSUFBQSxFQUFBLENBQUEsSUFBQSxDQUFBO0FBQ0EsTUFBQSxDQUFBLENBQUEsSUFBQSxFQUFBLENBQUEsSUFBQSxDQUFBO0lBQ0E7O0FBRUEsT0FBQSxFQUFBLENBQUEsQ0FBQSxHQUFBLEVBQUEsQ0FBQSxNQUFBLEdBQUEsTUFBQSxFQUFBO0FBQ0EsTUFBQSxDQUFBLFNBQUEsR0FBQSxDQUFBLENBQUE7QUFDQSxNQUFBLENBQUEsQ0FBQSxHQUFBLE1BQUEsR0FBQSxFQUFBLENBQUEsTUFBQSxDQUFBO0FBQ0EsTUFBQSxDQUFBLElBQUEsSUFBQSxDQUFBLEdBQUEsQ0FBQTtBQUNBLE1BQUEsQ0FBQSxJQUFBLElBQUEsR0FBQSxDQUFBO0lBQ0E7O0FBRUEsVUFBQSxDQUFBLFdBQUEsR0FBQSxDQUFBLENBQUE7O0FBRUEsUUFBQSxJQUFBLENBQUEsR0FBQSxDQUFBLEVBQUEsQ0FBQSxHQUFBLFFBQUEsQ0FBQSxNQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUE7QUFDQSxZQUFBLENBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxFQUFBLENBQUE7SUFDQTtHQUNBOztBQUVBLFdBQUEsTUFBQSxHQUFBO0FBQ0EsVUFBQSxDQUFBLFNBQUEsQ0FBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLEtBQUEsRUFBQSxNQUFBLENBQUEsQ0FBQTtBQUNBLGFBQUEsRUFBQSxDQUFBO0FBQ0EsWUFBQSxHQUFBLHFCQUFBLENBQUEsTUFBQSxDQUFBLENBQUE7R0FDQTs7QUFFQSxRQUFBLEVBQUEsQ0FBQTs7QUFFQSxZQUFBLENBQUEsWUFBQTtBQUNBLFNBQUEsQ0FBQSxvQkFBQSxDQUFBLFNBQUEsQ0FBQSxDQUFBO0FBQ0EsWUFBQSxHQUFBLFNBQUEsQ0FBQTtHQUNBLEVBQUEsSUFBQSxDQUFBLENBQUE7O0FBRUEsV0FBQSxXQUFBLENBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQTtBQUNBLFVBQUEsR0FBQSxHQUFBLElBQUEsQ0FBQSxNQUFBLEVBQUEsSUFBQSxHQUFBLEdBQUEsR0FBQSxDQUFBLENBQUE7R0FDQTs7QUFFQSxXQUFBLFNBQUEsQ0FBQSxHQUFBLEVBQUEsR0FBQSxFQUFBO0FBQ0EsVUFBQSxJQUFBLENBQUEsS0FBQSxDQUFBLEdBQUEsR0FBQSxJQUFBLENBQUEsTUFBQSxFQUFBLElBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxDQUFBLENBQUEsQ0FBQSxDQUFBO0dBQ0E7O0FBRUEsV0FBQSxnQkFBQSxDQUFBLE1BQUEsRUFBQTtBQUNBLFVBQUEsTUFBQSxJQUFBLElBQUEsQ0FBQSxFQUFBLEdBQUEsR0FBQSxDQUFBLENBQUE7R0FDQTs7QUFFQSxXQUFBLFFBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLE1BQUEsRUFBQSxXQUFBLEVBQUEsV0FBQSxFQUFBLEtBQUEsRUFBQTtBQUNBLE9BQUEsR0FBQSxHQUFBLElBQUEsQ0FBQSxFQUFBLEdBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQTtBQUNBLE9BQUEsQ0FBQSxHQUFBLEVBQUEsQ0FBQTtBQUNBLE9BQUEsQ0FBQSxHQUFBLEVBQUEsQ0FBQTtBQUNBLE9BQUEsSUFBQSxHQUFBLElBQUEsQ0FBQSxFQUFBLEdBQUEsTUFBQSxDQUFBOztBQUVBLFVBQUEsQ0FBQSxVQUFBLEdBQUEsTUFBQSxDQUFBO0FBQ0EsVUFBQSxDQUFBLFNBQUEsRUFBQSxDQUFBO0FBQ0EsVUFBQSxDQUFBLE1BQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxHQUFBLFdBQUEsQ0FBQSxDQUFBO0FBQ0EsUUFBQSxDQUFBLEdBQUEsQ0FBQSxFQUFBLENBQUEsR0FBQSxNQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUE7QUFDQSxLQUFBLEdBQUEsRUFBQSxHQUFBLElBQUEsQ0FBQSxHQUFBLENBQUEsR0FBQSxDQUFBLEdBQUEsV0FBQSxDQUFBO0FBQ0EsS0FBQSxHQUFBLEVBQUEsR0FBQSxJQUFBLENBQUEsR0FBQSxDQUFBLEdBQUEsQ0FBQSxHQUFBLFdBQUEsQ0FBQTtBQUNBLFdBQUEsQ0FBQSxNQUFBLENBQUEsQ0FBQSxFQUFBLENBQUEsQ0FBQSxDQUFBO0FBQ0EsT0FBQSxJQUFBLElBQUEsQ0FBQTs7QUFFQSxLQUFBLEdBQUEsRUFBQSxHQUFBLElBQUEsQ0FBQSxHQUFBLENBQUEsR0FBQSxDQUFBLEdBQUEsV0FBQSxDQUFBO0FBQ0EsS0FBQSxHQUFBLEVBQUEsR0FBQSxJQUFBLENBQUEsR0FBQSxDQUFBLEdBQUEsQ0FBQSxHQUFBLFdBQUEsQ0FBQTtBQUNBLFdBQUEsQ0FBQSxNQUFBLENBQUEsQ0FBQSxFQUFBLENBQUEsQ0FBQSxDQUFBO0FBQ0EsT0FBQSxJQUFBLElBQUEsQ0FBQTtJQUNBOztBQUVBLFVBQUEsQ0FBQSxNQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsR0FBQSxXQUFBLENBQUEsQ0FBQTtBQUNBLFVBQUEsQ0FBQSxTQUFBLEVBQUEsQ0FBQTtBQUNBLFVBQUEsQ0FBQSxTQUFBLEdBQUEsS0FBQSxDQUFBO0FBQ0EsVUFBQSxDQUFBLElBQUEsRUFBQSxDQUFBO0dBQ0E7O0FBRUEsV0FBQSxJQUFBLEdBQUE7QUFDQSxVQUFBLENBQUEsSUFBQSxFQUFBLENBQUE7QUFDQSxVQUFBLENBQUEsU0FBQSxDQUFBLElBQUEsQ0FBQSxDQUFBLEVBQUEsSUFBQSxDQUFBLENBQUEsQ0FBQSxDQUFBO0FBQ0EsVUFBQSxDQUFBLE1BQUEsQ0FBQSxJQUFBLENBQUEsS0FBQSxDQUFBLENBQUE7QUFDQSxVQUFBLENBQUEsU0FBQSxHQUFBLElBQUEsQ0FBQSxLQUFBLENBQUE7QUFDQSxVQUFBLENBQUEsU0FBQSxFQUFBOztBQUFBLEFBRUEsVUFBQSxDQUFBLFFBQUEsQ0FBQSxJQUFBLENBQUEsSUFBQSxHQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsRUFBQSxJQUFBLENBQUEsSUFBQSxHQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsRUFBQSxJQUFBLENBQUEsSUFBQSxFQUFBLElBQUEsQ0FBQSxJQUFBLENBQUEsQ0FBQTtBQUNBLFVBQUEsQ0FBQSxJQUFBLEVBQUEsQ0FBQTtBQUNBLFVBQUEsQ0FBQSxTQUFBLEVBQUEsQ0FBQTtBQUNBLFVBQUEsQ0FBQSxPQUFBLEVBQUEsQ0FBQTtBQUNBLE9BQUEsQ0FBQSxLQUFBLElBQUEsSUFBQSxDQUFBLFNBQUEsQ0FBQTtBQUNBLE9BQUEsQ0FBQSxJQUFBLElBQUEsS0FBQSxDQUFBO0FBQ0EsT0FBQSxDQUFBLElBQUEsSUFBQSxHQUFBLENBQUE7QUFDQSxPQUFBLENBQUEsQ0FBQSxJQUFBLElBQUEsQ0FBQSxJQUFBLENBQUE7QUFDQSxPQUFBLENBQUEsQ0FBQSxJQUFBLElBQUEsQ0FBQSxJQUFBLENBQUE7O0FBRUEsT0FBQSxJQUFBLENBQUEsQ0FBQSxHQUFBLENBQUEsRUFBQTtBQUNBLFFBQUEsQ0FBQSxJQUFBLElBQUEsQ0FBQSxHQUFBLENBQUE7QUFDQSxRQUFBLENBQUEsSUFBQSxJQUFBLEdBQUEsQ0FBQTtJQUNBO0FBQ0EsT0FBQSxJQUFBLENBQUEsQ0FBQSxHQUFBLE1BQUEsRUFBQTtBQUNBLFFBQUEsQ0FBQSxTQUFBLEdBQUEsQ0FBQSxDQUFBO0FBQ0EsUUFBQSxDQUFBLENBQUEsR0FBQSxNQUFBLENBQUE7QUFDQSxRQUFBLENBQUEsSUFBQSxJQUFBLENBQUEsR0FBQSxDQUFBO0FBQ0EsUUFBQSxDQUFBLElBQUEsSUFBQSxHQUFBLENBQUE7SUFDQTtBQUNBLE9BQUEsSUFBQSxDQUFBLENBQUEsR0FBQSxLQUFBLElBQUEsSUFBQSxDQUFBLENBQUEsR0FBQSxDQUFBLEVBQUE7QUFDQSxRQUFBLENBQUEsSUFBQSxJQUFBLENBQUEsR0FBQSxDQUFBO0lBQ0E7R0FDQTtFQUNBO0NBQ0EsQ0FBQSxDQUFBOztBQ2xPQSxHQUFBLENBQUEsTUFBQSxDQUFBLFVBQUEsY0FBQSxFQUFBO0FBQ0EsZUFBQSxDQUNBLEtBQUEsQ0FBQSxNQUFBLEVBQUE7QUFDQSxLQUFBLEVBQUEsR0FBQTtBQUNBLGFBQUEsRUFBQSx5QkFBQTtBQUNBLFlBQUEsRUFBQSxVQUFBO0VBQ0EsQ0FBQSxDQUNBLEtBQUEsQ0FBQSxVQUFBLEVBQUE7QUFDQSxLQUFBLEVBQUEsV0FBQTtBQUNBLGFBQUEsRUFBQSw2QkFBQTtBQUNBLFlBQUEsRUFBQSxhQUFBO0VBQ0EsQ0FBQSxDQUNBLEtBQUEsQ0FBQSxPQUFBLEVBQUE7QUFDQSxLQUFBLEVBQUEsUUFBQTtBQUNBLGFBQUEsRUFBQSwwQkFBQTtBQUNBLFlBQUEsRUFBQSxXQUFBO0VBQ0EsQ0FBQSxDQUNBLEtBQUEsQ0FBQSxTQUFBLEVBQUE7QUFDQSxLQUFBLEVBQUEsVUFBQTtBQUNBLGFBQUEsRUFBQSw0QkFBQTtBQUNBLFlBQUEsRUFBQSxhQUFBO0VBQ0EsQ0FBQSxDQUFBO0NBQ0EsQ0FBQSxDQUFBOztBQUVBLEdBQUEsQ0FBQSxVQUFBLENBQUEsVUFBQSxFQUFBLFlBQUEsRUFFQSxDQUFBLENBQUE7O0FBRUEsR0FBQSxDQUFBLFVBQUEsQ0FBQSxVQUFBLEVBQUEsWUFBQTtBQUNBLEtBQUEsU0FBQSxHQUFBLENBQUEsQ0FBQTtBQUNBLEtBQUEsUUFBQSxHQUFBLENBQUEsQ0FBQSxXQUFBLENBQUEsQ0FBQTtBQUNBLEtBQUEsT0FBQSxHQUFBLFFBQUEsQ0FBQTtBQUNBLEtBQUEsSUFBQSxDQUFBO0FBQ0EsS0FBQSxTQUFBLEdBQUEsQ0FBQSxDQUFBLE1BQUEsQ0FBQSxDQUFBO0FBQ0EsS0FBQSxRQUFBLENBQUE7O0FBRUEsS0FBQSxTQUFBLENBQUEsS0FBQSxFQUFBLEdBQUEsR0FBQSxFQUFBO0FBQ0EsVUFBQSxHQUFBLFdBQUEsQ0FBQSxNQUFBLEVBQUEsSUFBQSxDQUFBLENBQUE7RUFDQTtBQUNBLFVBQUEsQ0FBQSxNQUFBLENBQUEsWUFBQTtBQUNBLGVBQUEsQ0FBQSxRQUFBLENBQUEsQ0FBQTtBQUNBLE1BQUEsU0FBQSxDQUFBLEtBQUEsRUFBQSxHQUFBLEdBQUEsRUFBQTtBQUNBLElBQUEsQ0FBQSxXQUFBLENBQUEsQ0FBQSxTQUFBLENBQUEsQ0FBQSxDQUFBLENBQUE7QUFDQSxXQUFBLEdBQUEsV0FBQSxDQUFBLE1BQUEsRUFBQSxJQUFBLENBQUEsQ0FBQTtHQUNBO0VBQ0EsQ0FBQSxDQUFBOztBQUVBLFVBQUEsTUFBQSxHQUFBO0FBQ0EsV0FBQSxFQUFBLENBQUE7QUFDQSxVQUFBLENBQUEsR0FBQSxDQUFBLEVBQUEsbUJBQUEsRUFBQSxVQUFBLEdBQUEsU0FBQSxHQUFBLENBQUEsRUFBQSxHQUFBLE1BQUEsRUFBQSxDQUFBLENBQUE7QUFDQSxVQUFBLENBQUEsSUFBQSxDQUFBLFlBQUEsRUFBQSxTQUFBLEdBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxDQUFBO0FBQ0EsTUFBQSxHQUFBLE9BQUEsQ0FBQTtBQUNBLFNBQUEsR0FBQSxPQUFBLElBQUEsU0FBQSxHQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsQ0FBQTtFQUNBO0NBQ0EsQ0FBQSxDQUFBOztBQ3REQSxHQUFBLENBQUEsVUFBQSxDQUFBLGFBQUEsRUFBQSxVQUFBLE1BQUEsRUFBQTtBQUNBLEtBQUEsU0FBQSxHQUFBLENBQUEsQ0FBQSxNQUFBLENBQUEsQ0FBQTs7QUFFQSxVQUFBLGNBQUEsR0FBQTtBQUNBLEdBQUEsQ0FBQSxRQUFBLENBQUEsQ0FBQSxLQUFBLENBQUEsWUFBQTs7QUFFQSxPQUFBLE9BQUEsR0FBQSxDQUFBLENBQUE7QUFDQSxPQUFBLFVBQUEsR0FBQSxDQUFBLENBQUEsV0FBQSxDQUFBLENBQUEsTUFBQSxDQUFBO0FBQ0EsT0FBQSxRQUFBLEdBQUEsSUFBQSxDQUFBO0FBQ0EsT0FBQSxTQUFBLEdBQUEsS0FBQSxDQUFBO0FBQ0EsT0FBQSxRQUFBLEdBQUEsWUFBQSxDQUFBO0FBQ0EsT0FBQSxVQUFBLEdBQUEsSUFBQSxDQUFBOztBQUVBLFlBQUEsVUFBQSxHQUFBO0FBQ0EsYUFBQSxHQUFBLElBQUEsQ0FBQTs7QUFFQSxLQUFBLENBQUEsUUFBQSxHQUFBLE9BQUEsQ0FBQSxDQUFBLFdBQUEsQ0FBQSxVQUFBLENBQUEsQ0FBQSxRQUFBLENBQUEsUUFBQSxDQUFBOztBQUFBLEFBRUEsY0FBQSxDQUFBLFlBQUE7QUFDQSxjQUFBLEdBQUEsS0FBQSxDQUFBO0tBQ0EsRUFBQSxRQUFBLENBQUEsQ0FBQTtJQUNBOztBQUVBLFlBQUEsVUFBQSxHQUFBO0FBQ0EsUUFBQSxPQUFBLEtBQUEsQ0FBQSxFQUFBLE9BQUE7QUFDQSxXQUFBLEVBQUEsQ0FBQTtBQUNBLEtBQUEsQ0FBQSxRQUFBLElBQUEsT0FBQSxHQUFBLENBQUEsQ0FBQSxDQUFBLENBQUEsV0FBQSxDQUFBLFFBQUEsQ0FBQTs7O0FBQUEsQUFHQSxjQUFBLEVBQUEsQ0FBQTtJQUNBOztBQUVBLFlBQUEsWUFBQSxHQUFBO0FBQ0EsUUFBQSxPQUFBLEtBQUEsVUFBQSxFQUFBLE9BQUE7QUFDQSxXQUFBLEVBQUEsQ0FBQTtBQUNBLEtBQUEsQ0FBQSxRQUFBLElBQUEsT0FBQSxHQUFBLENBQUEsQ0FBQSxDQUFBLENBQUEsUUFBQSxDQUFBLFVBQUEsQ0FBQTs7QUFBQSxBQUVBLGNBQUEsRUFBQSxDQUFBO0lBQ0E7O0FBRUEsSUFBQSxDQUFBLFFBQUEsQ0FBQSxDQUFBLEVBQUEsQ0FBQSwyQkFBQSxFQUFBLFVBQUEsQ0FBQSxFQUFBO0FBQ0EsUUFBQSxTQUFBLEVBQUEsT0FBQTtBQUNBLFFBQUEsQ0FBQSxDQUFBLGFBQUEsQ0FBQSxVQUFBLEdBQUEsQ0FBQSxJQUFBLENBQUEsQ0FBQSxhQUFBLENBQUEsTUFBQSxHQUFBLENBQUEsRUFBQTtBQUNBLGVBQUEsRUFBQSxDQUFBO0tBQ0EsTUFBQTtBQUNBLGlCQUFBLEVBQUEsQ0FBQTtLQUNBO0lBQ0EsQ0FBQSxDQUFBOztBQUVBLElBQUEsQ0FBQSxRQUFBLENBQUEsQ0FBQSxFQUFBLENBQUEsU0FBQSxFQUFBLFVBQUEsQ0FBQSxFQUFBO0FBQ0EsUUFBQSxTQUFBLEVBQUEsT0FBQTtBQUNBLFFBQUEsQ0FBQSxDQUFBLEtBQUEsS0FBQSxFQUFBLEVBQUE7QUFDQSxlQUFBLEVBQUEsQ0FBQTtLQUNBLE1BQUEsSUFBQSxDQUFBLENBQUEsS0FBQSxLQUFBLEVBQUEsRUFBQTtBQUNBLGlCQUFBLEVBQUEsQ0FBQTtLQUNBO0lBQ0EsQ0FBQSxDQUFBO0dBQ0EsQ0FBQSxDQUFBO0VBQ0E7QUFDQSxLQUFBLFNBQUEsQ0FBQSxLQUFBLEVBQUEsR0FBQSxHQUFBLEVBQUE7QUFDQSxnQkFBQSxFQUFBLENBQUE7RUFDQTtDQUNBLENBQUEsQ0FBQTs7QUM5REEsR0FBQSxDQUFBLFNBQUEsQ0FBQSxnQkFBQSxFQUFBLFlBQUE7QUFDQSxRQUFBO0FBQ0EsVUFBQSxFQUFBLEdBQUE7QUFDQSxhQUFBLEVBQUEscUNBQUE7RUFDQSxDQUFBO0NBQ0EsQ0FBQSxDQUFBIiwiZmlsZSI6Im1haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyB3aW5kb3cuYXBwID0gYW5ndWxhci5tb2R1bGUoJ3BvcnRmb2xpbycsIFsndWkucm91dGVyJywgJ25nQW5pbWF0ZSddKTtcbndpbmRvdy5hcHAgPSBhbmd1bGFyLm1vZHVsZSgncG9ydGZvbGlvJywgWyd1aS5yb3V0ZXInXSk7XG5cblxuYXBwLmNvbmZpZyhmdW5jdGlvbiAoJHVybFJvdXRlclByb3ZpZGVyLCAkbG9jYXRpb25Qcm92aWRlciwgJHVybE1hdGNoZXJGYWN0b3J5UHJvdmlkZXIpIHtcblxuXHQvLyB0aGlzIG1ha2VzIHRoZSAnL3N0b3Jlcy8nIHJvdXRlIGNvcnJlY3RseSByZWRpcmVjdCB0byAnL3N0b3Jlcydcblx0JHVybFJvdXRlclByb3ZpZGVyLnJ1bGUoZnVuY3Rpb24gKCRpbmplY3RvciwgJGxvY2F0aW9uKSB7XG5cblx0XHR2YXIgcmUgPSAvKC4rKShcXC8rKShcXD8uKik/JC87XG5cdFx0dmFyIHBhdGggPSAkbG9jYXRpb24udXJsKCk7XG5cblx0XHRpZihyZS50ZXN0KHBhdGgpKSB7XG5cdFx0XHRyZXR1cm4gcGF0aC5yZXBsYWNlKHJlLCAnJDEkMycpO1xuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTtcblx0fSk7XG5cdC8vIFRoaXMgdHVybnMgb2ZmIGhhc2hiYW5nIHVybHMgKC8jYWJvdXQpIGFuZCBjaGFuZ2VzIGl0IHRvIHNvbWV0aGluZyBub3JtYWwgKC9hYm91dClcblx0JGxvY2F0aW9uUHJvdmlkZXIuaHRtbDVNb2RlKHRydWUpO1xuXHQkdXJsUm91dGVyUHJvdmlkZXIud2hlbignL2F1dGgvOnByb3ZpZGVyJywgZnVuY3Rpb24gKCkge1xuXHRcdHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTtcblx0fSk7XG5cdC8vIElmIHdlIGdvIHRvIGEgVVJMIHRoYXQgdWktcm91dGVyIGRvZXNuJ3QgaGF2ZSByZWdpc3RlcmVkLCBnbyB0byB0aGUgXCIvXCIgdXJsLlxuXHQkdXJsUm91dGVyUHJvdmlkZXIub3RoZXJ3aXNlKCcvJyk7XG59KTtcbiIsImFwcC5jb250cm9sbGVyKCdhYm91dEN0cmwnLCBmdW5jdGlvbigkc2NvcGUpe1xuXHR2YXIgdGhlV2luZG93ID0gJCh3aW5kb3cpO1xuXHR2YXIgZm9yY2UgPSBkMy5sYXlvdXQuZm9yY2UoKTtcblx0dmFyIHN0b3BwZWQgPSB0cnVlO1xuXG5cdC8vIGFuZ3VsYXIuZWxlbWVudChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKXtcblx0JHNjb3BlLnNraWxscyA9IFtcblx0XHR7bmFtZTogXCJKYXZhU2NyaXB0XCIsIGxldmVsOiAzfSxcblx0XHR7bmFtZTogXCJNb25nb0RCXCIsIGxldmVsOiAzfSxcblx0XHR7bmFtZTogXCJFeHByZXNzLmpzXCIsIGxldmVsOiAzfSxcblx0XHR7bmFtZTogXCJBbmd1bGFyLmpzXCIsIGxldmVsOiAzfSxcblx0XHR7bmFtZTogXCJOb2RlLmpzXCIsIGxldmVsOiAzfSxcblx0XHR7bmFtZTogXCJNb25nb29zZS5qc1wiLCBsZXZlbDogM30sXG5cdFx0e25hbWU6IFwiR2l0XCIsIGxldmVsOiAzfSxcblx0XHR7bmFtZTogXCJDU1MzXCIsIGxldmVsOiAzfSxcblx0XHR7bmFtZTogXCJIVE1MNVwiLCBsZXZlbDogM30sXG5cdFx0e25hbWU6IFwiUmVzb25zaXZlIERlc2lnblwiLCBsZXZlbDogMn0sXG5cdFx0e25hbWU6IFwiR3VscFwiLCBsZXZlbDogMn0sXG5cdFx0e25hbWU6IFwiTW9jaGEgJiBDaGFpXCIsIGxldmVsOiAyfSxcblx0XHR7bmFtZTogXCJqUXVlcnlcIiwgbGV2ZWw6IDJ9LFxuXHRcdHtuYW1lOiBcIkJvb3RzdHJhcFwiLCBsZXZlbDogMn0sXG5cdFx0e25hbWU6IFwiV2ViLUF1ZGlvXCIsIGxldmVsOiAyfSxcblx0XHR7bmFtZTogXCJDaHJvbWUgRXh0ZW5zaW9uc1wiLCBsZXZlbDogMX0sXG5cdFx0e25hbWU6IFwiU1FMXCIsIGxldmVsOiAxfSxcblx0XHR7bmFtZTogXCJXZWJTb2NrZXRzXCIsIGxldmVsOiAxfSxcblx0XHR7bmFtZTogXCJNSURJXCIsIGxldmVsOiAxfSxcblx0XHR7bmFtZTogXCJKYXZhXCIsIGxldmVsOiAxfSxcblx0XHR7bmFtZTogXCJDKytcIiwgbGV2ZWw6IDF9LFxuXHRdO1xuXG5cdCRzY29wZS5jb2xvcnMgPSBbXG5cdFx0JyM3RkZGRDQnLFxuXHRcdCcjRTBGRkZGJyxcblx0XHQnIzMzQ0NGRicsXG5cdFx0JyNDNjg4RTgnLFxuXHRcdCcjRkY4MDdEJyxcblx0XHQnI0ZGOEVCMidcblx0XTtcblxuXHQkc2NvcGUuc2tpbGxzLm1hcChmdW5jdGlvbihlLGkpe1xuXHRcdGUuY29sb3IgPSAkc2NvcGUuY29sb3JzW2klNl07XG5cdH0pO1xuZnVuY3Rpb24gaW5pdGlhbGl6ZVNraWxsc0Nsb3VkKCl7XG5cdHZhciBza2lsbHNDbG91ZCA9ICQoXCIjc2tpbGxzLWNsb3VkXCIpO1xuXHR2YXIgd2lkdGggPSBza2lsbHNDbG91ZC53aWR0aCgpO1xuXHR2YXIgaGVpZ2h0ID0gc2tpbGxzQ2xvdWQuaGVpZ2h0KCk7XG5cdHZhciBzdmcgPSBkMy5zZWxlY3QoXCIjc2tpbGxzLWNsb3VkXCIpLmFwcGVuZChcInN2Z1wiKTtcblxuXG5cdC8vY3JlYXRlIG5vZGVzXG5cdHZhciBub2RlcyA9IGQzLnJhbmdlKCRzY29wZS5za2lsbHMubGVuZ3RoKS5tYXAoZnVuY3Rpb24oaSkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRyYWRpdXM6ICRzY29wZS5za2lsbHNbaV0ubGV2ZWwqMTggKzE0LFxuXHRcdFx0bGFiZWw6ICRzY29wZS5za2lsbHNbaV0ubmFtZSxcblx0XHRcdHNraWxsTGV2ZWw6ICRzY29wZS5za2lsbHNbaV0ubGV2ZWwsXG5cdFx0XHRiZ0NvbG9yOiAkc2NvcGUuc2tpbGxzW2ldLmNvbG9yXG5cdFx0fTtcblx0fSk7XG5cblx0dmFyXHRyb290ID0gbm9kZXNbMF07XG5cdFx0cm9vdC5yYWRpdXMgPSAwO1xuXHRcdHJvb3QuZml4ZWQgPSB0cnVlO1xuXG5cdHZhciBncm91cHMgPSBzdmcuc2VsZWN0QWxsKFwiZ1wiKVxuXHRcdC5kYXRhKG5vZGVzLnNsaWNlKDEpKVxuXHRcdC5lbnRlcigpXG5cdFx0LmFwcGVuZChcImdcIik7XG5cblx0dmFyIGNpcmNsZXMgPSBncm91cHMuYXBwZW5kKCdjaXJjbGUnKVxuXHRcdC5kYXRhKG5vZGVzLnNsaWNlKDEpKVxuXHRcdC5hdHRyKFwiclwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBkLnJhZGl1czsgfSlcblx0XHQuc3R5bGUoXCJmaWxsXCIsIGZ1bmN0aW9uKGQsIGkpIHsgcmV0dXJuIGQuYmdDb2xvcjsgfSk7XG5cblx0dmFyIGxhYmVsID0gZ3JvdXBzLmFwcGVuZChcInRleHRcIilcblx0XHQudGV4dChmdW5jdGlvbihkKXsgcmV0dXJuIGQubGFiZWw7IH0pXG5cdFx0LmF0dHIoe1xuXHRcdFx0XCJhbGlnbm1lbnQtYmFzZWxpbmVcIjogXCJtaWRkbGVcIixcblx0XHRcdFwidGV4dC1hbmNob3JcIjogXCJtaWRkbGVcIixcblx0XHR9KTtcblxuXG5cdFx0Zm9yY2UuZ3Jhdml0eSgwLjA1KVxuXHRcdC5jaGFyZ2UoZnVuY3Rpb24oZCwgaSkgeyByZXR1cm4gaSA/IDAgOiAtMzAwMDsgfSlcblx0XHQubm9kZXMobm9kZXMpXG5cdFx0LnNpemUoW3dpZHRoLTIwMCwgaGVpZ2h0LTMwMF0pO1xuXG5cdGZvcmNlLnN0YXJ0KCk7XG5cdHN0b3BwZWQgPSBmYWxzZTtcblxuXHRmb3JjZS5vbihcInRpY2tcIiwgZnVuY3Rpb24oZSkge1xuXHRcdHZhciBxID0gZDMuZ2VvbS5xdWFkdHJlZShub2RlcyksXG5cdFx0XHRpID0gMCxcblx0XHRcdG4gPSBub2Rlcy5sZW5ndGg7XG5cblx0XHR3aGlsZSAoKytpIDwgbikgcS52aXNpdChjb2xsaWRlKG5vZGVzW2ldKSk7XG5cblx0XHQvL21vdmUgY2lyY2xlc1xuXHRcdHN2Zy5zZWxlY3RBbGwoXCJjaXJjbGVcIilcblx0XHRcdC5hdHRyKFwiY3hcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gZC54OyB9KVxuXHRcdFx0LmF0dHIoXCJjeVwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBkLnk7IH0pO1xuXG5cdFx0Ly9tb3ZlIGxhYmVsc1xuXHRcdHN2Zy5zZWxlY3RBbGwoXCJ0ZXh0XCIpXG5cdFx0XHQuYXR0cihcInhcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gZC54OyB9KVxuXHRcdFx0LmF0dHIoXCJ5XCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQueTsgfSk7XG5cdH0pO1xuXG5cdHN2Zy5vbihcIm1vdXNlbW92ZVwiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgcDEgPSBkMy5tb3VzZSh0aGlzKTtcblx0XHRyb290LnB4ID0gcDFbMF07XG5cdFx0cm9vdC5weSA9IHAxWzFdO1xuXHRcdGZvcmNlLnJlc3VtZSgpO1xuXHR9KTtcblxuLy9TbyB0aGV5IGRvbid0IGFsbCBzdGFydCBvdXQgaW4gYSBzdHJhaWdodCBsaW5lXG5cdHJvb3QucHggPSAxO1xuXHRyb290LnB5ID0gMTtcblxuXHRmdW5jdGlvbiBjb2xsaWRlKG5vZGUpIHtcblx0XHR2YXIgciA9IG5vZGUucmFkaXVzICsgMTYsXG5cdFx0XHRueDEgPSBub2RlLnggLSByLFxuXHRcdFx0bngyID0gbm9kZS54ICsgcixcblx0XHRcdG55MSA9IG5vZGUueSAtIHIsXG5cdFx0XHRueTIgPSBub2RlLnkgKyByO1xuXHRcdHJldHVybiBmdW5jdGlvbihxdWFkLCB4MSwgeTEsIHgyLCB5Mikge1xuXHRcdFx0aWYgKHF1YWQucG9pbnQgJiYgKHF1YWQucG9pbnQgIT09IG5vZGUpKSB7XG5cdFx0XHRcdHZhciB4ID0gbm9kZS54IC0gcXVhZC5wb2ludC54LFxuXHRcdFx0XHRcdHkgPSBub2RlLnkgLSBxdWFkLnBvaW50LnksXG5cdFx0XHRcdFx0bCA9IE1hdGguc3FydCh4ICogeCArIHkgKiB5KSxcblx0XHRcdFx0XHRyID0gbm9kZS5yYWRpdXMgKyBxdWFkLnBvaW50LnJhZGl1cztcblxuXHRcdFx0XHRpZiAobCA8IHIpIHtcblx0XHRcdFx0XHRsID0gKGwgLSByKSAvIGwgKiAwLjU7XG5cdFx0XHRcdFx0bm9kZS54IC09IHggKj0gbDtcblx0XHRcdFx0XHRub2RlLnkgLT0geSAqPSBsO1xuXHRcdFx0XHRcdHF1YWQucG9pbnQueCArPSB4O1xuXHRcdFx0XHRcdHF1YWQucG9pbnQueSArPSB5O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4geDEgPiBueDIgfHwgeDIgPCBueDEgfHwgeTEgPiBueTIgfHwgeTIgPCBueTE7XG5cdFx0fTtcblx0fVxufVxuXHQvLyB9KTtcblxuXHRpZiAodGhlV2luZG93LndpZHRoKCkgPiAxMDc0KSB7XG5cdFx0aW5pdGlhbGl6ZVNraWxsc0Nsb3VkKCk7XG5cdH1cblxuXHR0aGVXaW5kb3cucmVzaXplKGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29uc29sZS5sb2codGhlV2luZG93KTtcblx0XHRcdHZhciB0b3AgID0gd2luZG93LnBhZ2VZT2Zmc2V0IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3A7XG5cdFx0XHRjb25zb2xlLmxvZyhcIlRPUDogXCIsdG9wKTtcblx0XHRcdGNvbnNvbGUubG9nKCQoJ2h0bWwsYm9keScpLnNjcm9sbFRvcCgpKTtcblx0XHRpZiAodGhlV2luZG93LndpZHRoKCkgPiAxMDc0KSB7XG5cdFx0XHQkKCdodG1sLGJvZHknKS5zY3JvbGxUb3AoMCk7XG5cdFx0XHRjb25zb2xlLmxvZygnc25hcHBpbmcgYmFjayB0byB0b3AnKTtcblx0XHRcdC8vc3RhcnQgLyByZXN0YXJ0IG1vdXNlb3ZlciBsaXN0ZW5lciBpZiBzdG9wcGVkXG5cdFx0XHRpZiAoc3RvcHBlZCkge1xuXHRcdFx0XHRpbml0aWFsaXplU2tpbGxzQ2xvdWQoKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9yY2Uuc3RvcCgpO1xuXHRcdH1cblx0fSk7XG59KTtcbiIsImFwcC5jb250cm9sbGVyKCdjb250YWN0Q3RybCcsIGZ1bmN0aW9uKCRzY29wZSwgJGh0dHApe1xuXHQkc2NvcGUuZm9ybURhdGEgPSB7fTtcblxuXHQkc2NvcGUuc2VuZE1haWwgPSBmdW5jdGlvbigpe1xuXHRcdCRzY29wZS53YWl0aW5nID0gdHJ1ZTtcblx0XHQkc2NvcGUuc2VudCA9IGZhbHNlO1xuXHRcdCRzY29wZS5zdWNjZXNzID0gZmFsc2U7XG5cdFx0JGh0dHAucG9zdCgnL2FwaS9jb250YWN0JywgJHNjb3BlLmZvcm1EYXRhKVxuXHRcdC50aGVuKGZ1bmN0aW9uKHN1Y2Nlc3NSZXNwb25zZSl7XG5cdFx0XHQkc2NvcGUud2FpdGluZyA9IGZhbHNlO1xuXHRcdFx0JHNjb3BlLnNlbnQgPSB0cnVlO1xuXHRcdFx0JHNjb3BlLnN1Y2Nlc3MgPSBzdWNjZXNzUmVzcG9uc2UuZGF0YTtcblx0XHRcdCRzY29wZS5mb3JtRGF0YSA9IHt9O1xuXHRcdH0pO1xuXHR9O1xuXHQvL1xuXHR2YXIgcmVzdW1lTGFiZWwgPSAkKCcjcmVzdW1lJyk7XG5cdHZhciBvdmVybGF5ID0gJCgnI292ZXJsYXknKTtcblx0dmFyIHJlc3VtZSA9ICQoJyNyZXN1bWUtY29udGFpbmVyJyk7XG5cblx0cmVzdW1lTGFiZWwuY2xpY2soZnVuY3Rpb24oKXtcblx0XHRvdmVybGF5LmNzcyh7J29wYWNpdHknOiAnLjcnLCAnei1pbmRleCc6ICcxJ30pO1xuXHRcdHJlc3VtZS5jc3MoeydkaXNwbGF5JzogJ2Jsb2NrJ30pO1xuXG5cdH0pO1xuXHRvdmVybGF5LmNsaWNrKGZ1bmN0aW9uKCl7XG5cdFx0b3ZlcmxheS5jc3MoeydvcGFjaXR5JzogJzAnLCAnei1pbmRleCc6ICctMSd9KTtcblx0XHRyZXN1bWUuY3NzKHsnZGlzcGxheSc6ICdub25lJ30pO1xuXHR9KTtcblxuXHQvLyB2YXIgY2FyZCA9ICQoJyNjYXJkJyk7XG5cdC8vIHZhciBub3RlID0gJCgnLm5vdGUnKTtcblx0Ly8gdmFyIGFycm93ID0gJCgnI2Fycm93Jyk7XG5cdC8vIHZhciB0b2dnbGUgPSB0cnVlO1xuXG5cdC8vIGFycm93LmNsaWNrKGZ1bmN0aW9uKCl7XG5cdC8vIFx0aWYgKHRvZ2dsZSl7XG5cdC8vIFx0XHRjYXJkLnJlbW92ZUNsYXNzKCdoaWRkZW4nKS5yZW1vdmVDbGFzcygnaW5pdGlhbCcpLmFkZENsYXNzKCd2aXNpYmxlJyk7XG5cdC8vIFx0XHQvLyBhcnJvdy5jc3MoeydkaXNwbGF5JyA6ICdub25lJ30pO1xuXHQvL1xuXHQvL1xuXHQvLyBcdFx0Ly8gbm90ZS5jc3MoeydkaXNwbGF5JzogJ2luaXRpYWwnfSk7XG5cdC8vIFx0XHRzZXRUaW1lb3V0KGV4cGxvZGUsIDUwMCk7XG5cdC8vIFx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG5cdC8vIFx0XHRcdCQoJyNjYW52YXMnKS5jc3MoeydkaXNwbGF5JyA6ICdub25lJ30pO1xuXHQvLyBcdFx0XHQvLyBhcnJvdy5jc3MoeydkaXNwbGF5JyA6ICdpbml0aWFsJ30pO1xuXHQvL1xuXHQvLyBcdFx0fSwgNDAwMCk7XG5cdC8vIFx0fSBlbHNlIHtcblx0Ly8gXHRcdGNhcmQucmVtb3ZlQ2xhc3MoJ3Zpc2libGUnKS5hZGRDbGFzcygnaGlkZGVuJyk7XG5cdC8vXG5cdC8vXG5cdC8vIFx0XHQvLyBub3RlLmNzcyh7J2Rpc3BsYXknOiAnbm9uZSd9KTtcblx0Ly8gXHR9XG5cdC8vIFx0dG9nZ2xlID0gIXRvZ2dsZTtcblx0Ly8gfSk7XG5cblxuXHRmdW5jdGlvbiBleHBsb2RlKCkge1xuXG5cdFx0JCgnI2NhbnZhcycpLmNzcyh7J2Rpc3BsYXknIDogJ2luaXRpYWwnfSk7XG5cblx0XHR2YXIgcmVxdWVzdElkO1xuXG5cdFx0dmFyIGNhbnZhcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2FudmFzXCIpLFxuXHRcdFx0Y29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIiksXG5cdFx0XHR3aWR0aCA9IGNhbnZhcy53aWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoLFxuXHRcdFx0aGVpZ2h0ID0gY2FudmFzLmhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodCxcblx0XHRcdHBhcnRpY2xlID0gW10sXG5cdFx0XHRwYXJ0aWNsZUNvdW50ID0gMCxcblx0XHRcdGdyYXZpdHkgPSAwLjMsXG5cdFx0XHRjb2xvcnMgPVxuXHRcdFx0Ly8gW1xuXHRcdFx0Ly8gXHQnI2Y0NDMzNicsICcjZTkxZTYzJywgJyM5YzI3YjAnLCAnIzY3M2FiNycsICcjM2Y1MWI1Jyxcblx0XHRcdC8vIFx0JyMyMTk2ZjMnLCAnIzAzYTlmNCcsICcjMDBiY2Q0JywgJyMwMDk2ODgnLCAnIzRDQUY1MCcsXG5cdFx0XHQvLyBcdCcjOEJDMzRBJywgJyNDRERDMzknLCAnI0ZGRUIzQicsICcjRkZDMTA3JywgJyNGRjk4MDAnLFxuXHRcdFx0Ly8gXHQnI0ZGNTcyMicsICcjNzk1NTQ4J1xuXHRcdFx0Ly8gXTtcblx0XHRcdFsnIzdGRkZENCcsJyNFMEZGRkYnLCcjMzNDQ0ZGJywnI0M2ODhFOCcsJyNGRjgwN0QnLCcjRkY4RUIyJ107XG5cblx0XHRmb3IoIHZhciBpID0gMDsgaSA8IDUwOyBpKyspe1xuXHRcdFx0cGFydGljbGUucHVzaCh7XG5cdFx0XHRcdHggOiB3aWR0aC8yLFxuXHRcdFx0XHR5IDogaGVpZ2h0LzIsXG5cdFx0XHRcdGJveFcgOiByYW5kb21SYW5nZSg1LDIwKSxcblx0XHRcdFx0Ym94SCA6IHJhbmRvbVJhbmdlKDUsMjApLFxuXHRcdFx0XHRzaXplIDogcmFuZG9tUmFuZ2UoMiw4KSxcblxuXHRcdFx0XHRzcGlrZXJhbjpyYW5kb21SYW5nZSgzLDUpLFxuXG5cdFx0XHRcdHZlbFggOnJhbmRvbVJhbmdlKC04LDgpLFxuXHRcdFx0XHR2ZWxZIDpyYW5kb21SYW5nZSgtNTAsLTEwKSxcblxuXHRcdFx0XHRhbmdsZSA6Y29udmVydFRvUmFkaWFucyhyYW5kb21SYW5nZSgwLDM2MCkpLFxuXHRcdFx0XHRjb2xvcjpjb2xvcnNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogY29sb3JzLmxlbmd0aCldLFxuXHRcdFx0XHRhbmdsZXNwaW46cmFuZG9tUmFuZ2UoLTAuMiwwLjIpLFxuXG5cdFx0XHRcdGRyYXcgOiBkcmF3XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHR2YXIgcjE9e1xuXHRcdFx0eDp3aWR0aC8yLTE1MCxcblx0XHRcdHk6aGVpZ2h0LzItMTUwLFxuXHRcdFx0d2lkdGg6MzAwLFxuXHRcdFx0aGVpZ2h0OjMwMCxcblx0XHRcdHZlbFggOjAsXG5cdFx0XHR2ZWxZIDotMTAsXG5cdFx0XHRhbHBoYXRvcDowXG5cdFx0fTtcblxuXG5cdFx0ZnVuY3Rpb24gZHJhd1NjcmVlbigpe1xuXHRcdFx0dmFyIHNpemUgPSA1MDtcblx0XHRcdGlmIChyMS5hbHBoYXRvcCA8IDEpe1xuXHRcdFx0XHRyMS5hbHBoYXRvcCArPSAwLjAxO1xuXHRcdFx0fSBlbHNle1xuXHRcdFx0XHRyMS5hbHBoYXRvcCA9IDE7XG5cdFx0XHR9XG5cdFx0XHRjb250ZXh0Lmdsb2JhbEFscGhhID0gcjEuYWxwaGF0b3A7XG5cblx0XHRcdGlmKHIxLmFscGhhdG9wID09PSAxKXtcblx0XHRcdFx0cjEudmVsWSo9IDAuOTk5O1xuXHRcdFx0XHRyMS52ZWxZICs9IDAuMztcblx0XHRcdFx0cjEueCArPSByMS52ZWxYO1xuXHRcdFx0XHRyMS55ICs9IHIxLnZlbFk7XG5cdFx0XHR9XG5cblx0XHRcdGlmKHIxLnkgKyByMS5oZWlnaHQgPiBoZWlnaHQpe1xuXHRcdFx0XHRyMS5hbmdsZXNwaW4gPSAwO1xuXHRcdFx0XHRyMS55ID0gaGVpZ2h0IC0gcjEuaGVpZ2h0O1xuXHRcdFx0XHRyMS52ZWxZICo9IC0wLjg7XG5cdFx0XHRcdHIxLnZlbFggKj0gMC45O1xuXHRcdFx0fVxuXG5cdFx0XHRjb250ZXh0Lmdsb2JhbEFscGhhID0gMTtcblxuXHRcdFx0Zm9yKCB2YXIgaSA9IDA7IGkgPCBwYXJ0aWNsZS5sZW5ndGg7IGkrKyl7XG5cdFx0XHRcdHBhcnRpY2xlW2ldLmRyYXcoKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRmdW5jdGlvbiB1cGRhdGUoKXtcblx0XHRcdGNvbnRleHQuY2xlYXJSZWN0KDAsMCx3aWR0aCxoZWlnaHQpO1xuXHRcdFx0ZHJhd1NjcmVlbigpO1xuXHRcdFx0cmVxdWVzdElkID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHVwZGF0ZSk7XG5cdFx0fVxuXG5cdFx0dXBkYXRlKCk7XG5cblx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG5cdFx0XHR3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUocmVxdWVzdElkKTtcblx0XHRcdHJlcXVlc3RJZCA9IHVuZGVmaW5lZDtcblx0XHR9LDUwMDApO1xuXG5cdFx0ZnVuY3Rpb24gcmFuZG9tUmFuZ2UobWluLCBtYXgpe1xuXHRcdFx0cmV0dXJuIG1pbiArIE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluICk7XG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gcmFuZG9tSW50KG1pbiwgbWF4KXtcblx0XHRcdHJldHVybiBNYXRoLmZsb29yKG1pbiArIE1hdGgucmFuZG9tKCkqIChtYXggLSBtaW4gKyAxKSk7XG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gY29udmVydFRvUmFkaWFucyhkZWdyZWUpIHtcblx0XHRcdHJldHVybiBkZWdyZWUqKE1hdGguUEkvMTgwKTtcblx0XHR9XG5cblx0XHRmdW5jdGlvbiBkcmF3U3RhcihjeCwgY3ksIHNwaWtlcywgb3V0ZXJSYWRpdXMsIGlubmVyUmFkaXVzLGNvbG9yKSB7XG5cdFx0XHR2YXIgcm90ID0gTWF0aC5QSSAvIDIgKiAzO1xuXHRcdFx0dmFyIHggPSBjeDtcblx0XHRcdHZhciB5ID0gY3k7XG5cdFx0XHR2YXIgc3RlcCA9IE1hdGguUEkgLyBzcGlrZXM7XG5cblx0XHRcdGNvbnRleHQuc3Ryb2tlU3lsZSA9IFwiIzAwMFwiO1xuXHRcdFx0Y29udGV4dC5iZWdpblBhdGgoKTtcblx0XHRcdGNvbnRleHQubW92ZVRvKGN4LCBjeSAtIG91dGVyUmFkaXVzKTtcblx0XHRcdGZvciAoaSA9IDA7IGkgPCBzcGlrZXM7IGkrKykge1xuXHRcdFx0XHR4ID0gY3ggKyBNYXRoLmNvcyhyb3QpICogb3V0ZXJSYWRpdXM7XG5cdFx0XHRcdHkgPSBjeSArIE1hdGguc2luKHJvdCkgKiBvdXRlclJhZGl1cztcblx0XHRcdFx0Y29udGV4dC5saW5lVG8oeCwgeSk7XG5cdFx0XHRcdHJvdCArPSBzdGVwO1xuXG5cdFx0XHRcdHggPSBjeCArIE1hdGguY29zKHJvdCkgKiBpbm5lclJhZGl1cztcblx0XHRcdFx0eSA9IGN5ICsgTWF0aC5zaW4ocm90KSAqIGlubmVyUmFkaXVzO1xuXHRcdFx0XHRjb250ZXh0LmxpbmVUbyh4LCB5KTtcblx0XHRcdFx0cm90ICs9IHN0ZXA7XG5cdFx0XHR9XG5cblx0XHRcdGNvbnRleHQubGluZVRvKGN4LCBjeSAtIG91dGVyUmFkaXVzKTtcblx0XHRcdGNvbnRleHQuY2xvc2VQYXRoKCk7XG5cdFx0XHRjb250ZXh0LmZpbGxTdHlsZT1jb2xvcjtcblx0XHRcdGNvbnRleHQuZmlsbCgpO1xuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGRyYXcoKXtcblx0XHRcdGNvbnRleHQuc2F2ZSgpO1xuXHRcdFx0Y29udGV4dC50cmFuc2xhdGUodGhpcy54LHRoaXMueSk7XG5cdFx0XHRjb250ZXh0LnJvdGF0ZSh0aGlzLmFuZ2xlKTtcblx0XHRcdGNvbnRleHQuZmlsbFN0eWxlPXRoaXMuY29sb3I7XG5cdFx0XHRjb250ZXh0LmJlZ2luUGF0aCgpO1xuXHRcdFx0Ly8gZHJhd1N0YXIoMCwgMCwgNSwgdGhpcy5ib3hXLCB0aGlzLmJveEgpO1xuXHRcdFx0Y29udGV4dC5maWxsUmVjdCh0aGlzLmJveFcvMiotMSx0aGlzLmJveEgvMiotMSx0aGlzLmJveFcsdGhpcy5ib3hIKTtcblx0XHRcdGNvbnRleHQuZmlsbCgpO1xuXHRcdFx0Y29udGV4dC5jbG9zZVBhdGgoKTtcblx0XHRcdGNvbnRleHQucmVzdG9yZSgpO1xuXHRcdFx0dGhpcy5hbmdsZSArPSB0aGlzLmFuZ2xlc3Bpbjtcblx0XHRcdHRoaXMudmVsWSo9IDAuOTk5O1xuXHRcdFx0dGhpcy52ZWxZICs9IDAuMztcblx0XHRcdHRoaXMueCArPSB0aGlzLnZlbFg7XG5cdFx0XHR0aGlzLnkgKz0gdGhpcy52ZWxZO1xuXG5cdFx0XHRpZih0aGlzLnkgPCAwKXtcblx0XHRcdFx0dGhpcy52ZWxZICo9IC0wLjI7XG5cdFx0XHRcdHRoaXMudmVsWCAqPSAwLjk7XG5cdFx0XHR9XG5cdFx0XHRpZiAodGhpcy55ID4gaGVpZ2h0KXtcblx0XHRcdFx0dGhpcy5hbmdsZXNwaW4gPSAwO1xuXHRcdFx0XHR0aGlzLnkgPSBoZWlnaHQ7XG5cdFx0XHRcdHRoaXMudmVsWSAqPSAtMC4yO1xuXHRcdFx0XHR0aGlzLnZlbFggKj0gMC45O1xuXHRcdFx0fVxuXHRcdFx0aWYgKHRoaXMueCA+IHdpZHRoIHx8dGhpcy54PCAwKXtcblx0XHRcdFx0dGhpcy52ZWxYICo9IC0wLjU7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59KTtcbiIsImFwcC5jb25maWcoZnVuY3Rpb24oJHN0YXRlUHJvdmlkZXIpe1xuXHQkc3RhdGVQcm92aWRlclxuXHQuc3RhdGUoJ2hvbWUnLCB7XG5cdFx0dXJsOiAnLycsXG5cdFx0dGVtcGxhdGVVcmw6ICcvanMvdGVtcGxhdGVzL2hvbWUuaHRtbCcsXG5cdFx0Y29udHJvbGxlcjogJ2hvbWVDdHJsJ1xuXHR9KVxuXHQuc3RhdGUoJ3Byb2plY3RzJywge1xuXHRcdHVybDogJy9wcm9qZWN0cycsXG5cdFx0dGVtcGxhdGVVcmw6ICcvanMvdGVtcGxhdGVzL3Byb2plY3RzLmh0bWwnLFxuXHRcdGNvbnRyb2xsZXI6ICdwcm9qZWN0Q3RybCdcblx0fSlcblx0LnN0YXRlKCdhYm91dCcsIHtcblx0XHR1cmw6ICcvYWJvdXQnLFxuXHRcdHRlbXBsYXRlVXJsOiAnL2pzL3RlbXBsYXRlcy9hYm91dC5odG1sJyxcblx0XHRjb250cm9sbGVyOiAnYWJvdXRDdHJsJ1xuXHR9KVxuXHQuc3RhdGUoJ2NvbnRhY3QnLCB7XG5cdFx0dXJsOiAnL2NvbnRhY3QnLFxuXHRcdHRlbXBsYXRlVXJsOiAnL2pzL3RlbXBsYXRlcy9jb250YWN0Lmh0bWwnLFxuXHRcdGNvbnRyb2xsZXI6ICdjb250YWN0Q3RybCdcblx0fSk7XG59KTtcblxuYXBwLmNvbnRyb2xsZXIoJ21haW5DdHJsJywgZnVuY3Rpb24oKXtcblxufSk7XG5cbmFwcC5jb250cm9sbGVyKCdob21lQ3RybCcsIGZ1bmN0aW9uKCl7XG5cdFx0dmFyIGluY3JlbWVudCA9IDA7XG5cdFx0dmFyIGNhcm91c2VsID0gJCgnI2Nhcm91c2VsJyk7XG5cdFx0dmFyIGN1cnJlbnQgPSAnI2ZpZy0xJztcblx0XHR2YXIgcHJldjtcblx0XHR2YXIgdGhlV2luZG93ID0gJCh3aW5kb3cpO1xuXHRcdHZhciBpbnRlcnZhbDtcblxuXHRcdGlmICh0aGVXaW5kb3cud2lkdGgoKSA+IDc2OCkge1xuXHRcdFx0aW50ZXJ2YWwgPSBzZXRJbnRlcnZhbChyb3RhdGUsMTUwMCk7XG5cdFx0fVxuXHRcdHRoZVdpbmRvdy5yZXNpemUoZnVuY3Rpb24oKSB7XG5cdFx0XHRjbGVhckludGVydmFsKGludGVydmFsKTtcblx0XHRcdGlmICh0aGVXaW5kb3cud2lkdGgoKSA+IDc2OCkge1xuXHRcdFx0XHQkKCdodG1sLGJvZHknKS5zY3JvbGxUb3AoMCk7XG5cdFx0XHRcdGludGVydmFsID0gc2V0SW50ZXJ2YWwocm90YXRlLDE1MDApO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0ZnVuY3Rpb24gcm90YXRlKCl7XG5cdFx0XHRpbmNyZW1lbnQrKztcblx0XHRcdGNhcm91c2VsLmNzcyh7Jy13ZWJraXQtdHJhbnNmb3JtJzogJ3JvdGF0ZVgoJyArIChpbmNyZW1lbnQgKiAtNjApICsgJ2RlZyknfSk7XG5cdFx0XHRjYXJvdXNlbC5hdHRyKCdkYXRhLXN0YXRlJywoaW5jcmVtZW50ICUgNikgKyAxKTtcblx0XHRcdHByZXYgPSBjdXJyZW50O1xuXHRcdFx0Y3VycmVudCA9ICcjZmlnLScgKyAoKGluY3JlbWVudCAlIDYpICsgMSk7XG5cdFx0fVxufSk7XG4iLCJhcHAuY29udHJvbGxlcigncHJvamVjdEN0cmwnLCBmdW5jdGlvbigkc2NvcGUpe1xuXHR2YXIgdGhlV2luZG93ID0gJCh3aW5kb3cpO1xuXG5cdGZ1bmN0aW9uIGluaXRpYWxpemVTa2V3KCl7XG5cdFx0JChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKSB7XG5cblx0XHRcdHZhciBjdXJQYWdlID0gMTtcblx0XHRcdHZhciBudW1PZlBhZ2VzID0gJChcIi5za3ctcGFnZVwiKS5sZW5ndGg7XG5cdFx0XHR2YXIgYW5pbVRpbWUgPSAxMDAwO1xuXHRcdFx0dmFyIHNjcm9sbGluZyA9IGZhbHNlO1xuXHRcdFx0dmFyIHBnUHJlZml4ID0gXCIuc2t3LXBhZ2UtXCI7XG5cdFx0XHR2YXIgcHJvZ1ByZWZpeCA9IFwiI3BcIjtcblxuXHRcdFx0ZnVuY3Rpb24gcGFnaW5hdGlvbigpIHtcblx0XHRcdFx0c2Nyb2xsaW5nID0gdHJ1ZTtcblxuXHRcdFx0XHQkKHBnUHJlZml4ICsgY3VyUGFnZSkucmVtb3ZlQ2xhc3MoXCJpbmFjdGl2ZVwiKS5hZGRDbGFzcyhcImFjdGl2ZVwiKTtcblx0XHRcdFx0Ly8gJChwcm9nUHJlZml4ICsgY3VyUGFnZSkuYWRkQ2xhc3MoXCJjdXJyZW50XCIpO1xuXHRcdFx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHNjcm9sbGluZyA9IGZhbHNlO1xuXHRcdFx0XHR9LCBhbmltVGltZSk7XG5cdFx0XHR9XG5cblx0XHRcdGZ1bmN0aW9uIG5hdmlnYXRlVXAoKSB7XG5cdFx0XHRcdGlmIChjdXJQYWdlID09PSAxKSByZXR1cm47XG5cdFx0XHRcdGN1clBhZ2UtLTtcblx0XHRcdFx0JChwZ1ByZWZpeCArIChjdXJQYWdlICsgMSkpLnJlbW92ZUNsYXNzKFwiYWN0aXZlXCIpO1xuXHRcdFx0XHQvLyAkKHByb2dQcmVmaXggKyAoY3VyUGFnZSArIDEpKS5yZW1vdmVDbGFzcyhcImN1cnJlbnRcIik7XG5cblx0XHRcdFx0cGFnaW5hdGlvbigpO1xuXHRcdFx0fVxuXG5cdFx0XHRmdW5jdGlvbiBuYXZpZ2F0ZURvd24oKSB7XG5cdFx0XHRcdGlmIChjdXJQYWdlID09PSBudW1PZlBhZ2VzKSByZXR1cm47XG5cdFx0XHRcdGN1clBhZ2UrKztcblx0XHRcdFx0JChwZ1ByZWZpeCArIChjdXJQYWdlIC0gMSkpLmFkZENsYXNzKFwiaW5hY3RpdmVcIik7XG5cdFx0XHRcdC8vICQocHJvZ1ByZWZpeCArIChjdXJQYWdlIC0xKSkucmVtb3ZlQ2xhc3MoXCJjdXJyZW50XCIpO1xuXHRcdFx0XHRwYWdpbmF0aW9uKCk7XG5cdFx0XHR9XG5cblx0XHRcdCQoZG9jdW1lbnQpLm9uKFwibW91c2V3aGVlbCBET01Nb3VzZVNjcm9sbFwiLCBmdW5jdGlvbihlKSB7XG5cdFx0XHRcdGlmIChzY3JvbGxpbmcpIHJldHVybjtcblx0XHRcdFx0aWYgKGUub3JpZ2luYWxFdmVudC53aGVlbERlbHRhID4gMCAgfHwgZS5vcmlnaW5hbEV2ZW50LmRldGFpbCA8IDApIHtcblx0XHRcdFx0XHRuYXZpZ2F0ZVVwKCk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0bmF2aWdhdGVEb3duKCk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0XHQkKGRvY3VtZW50KS5vbihcImtleWRvd25cIiwgZnVuY3Rpb24oZSkge1xuXHRcdFx0XHRpZiAoc2Nyb2xsaW5nKSByZXR1cm47XG5cdFx0XHRcdGlmIChlLndoaWNoID09PSAzOCkge1xuXHRcdFx0XHRcdG5hdmlnYXRlVXAoKTtcblx0XHRcdFx0fSBlbHNlIGlmIChlLndoaWNoID09PSA0MCkge1xuXHRcdFx0XHRcdG5hdmlnYXRlRG93bigpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9KTtcblx0fVxuXHRpZiAodGhlV2luZG93LndpZHRoKCkgPiA3NjgpIHtcblx0XHRpbml0aWFsaXplU2tldygpO1xuXHR9XG59KTtcbiIsImFwcC5kaXJlY3RpdmUoJ3Byb2plY3RzTW9iaWxlJywgZnVuY3Rpb24oKXtcblx0cmV0dXJuIHtcblx0XHRyZXN0cmljdDogJ0UnLFxuXHRcdHRlbXBsYXRlVXJsOiAnL2pzL2RpcmVjdGl2ZXMvcHJvamVjdHMtbW9iaWxlLmh0bWwnXG5cdH07XG59KTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
