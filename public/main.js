'use strict';

window.app = angular.module('portfolio', ['ui.router']);

app.config(function ($urlRouterProvider, $locationProvider, $urlMatcherFactoryProvider) {

	// this makes the '/stores/' route correctly redirect to '/stores'
	$urlRouterProvider.rule(function ($injector, $location) {

		var re = /(.+)(\/+)(\?.*)?$/;
		var path = $location.url();

		if (re.test(path)) {
			return path.replace(re, '$1$3');
		}

		return false;
	});
	// This turns off hashbang urls (/#about) and changes it to something normal (/about)
	$locationProvider.html5Mode(true);
	$urlRouterProvider.when('/auth/:provider', function () {
		window.location.reload();
	});
	// If we go to a URL that ui-router doesn't have registered, go to the "/" url.
	$urlRouterProvider.otherwise('/');
});

app.controller('aboutCtrl', function ($scope) {

	// angular.element(document).ready(function(){
	var skillsCloud = $("#skills-cloud");
	var width = skillsCloud.width();
	var height = skillsCloud.height();

	var svg = d3.select("#skills-cloud").append("svg");

	var skills = [{ name: "JavaScript", level: 3 }, { name: "MongoDB", level: 3 }, { name: "Express.js", level: 3 }, { name: "Angular.js", level: 3 }, { name: "Node.js", level: 3 }, { name: "Mongoose.js", level: 3 }, { name: "Git", level: 3 }, { name: "CSS3", level: 3 }, { name: "HTML5", level: 3 }, { name: "Resonsive Design", level: 2 }, { name: "Gulp", level: 2 }, { name: "Mocha & Chai", level: 2 }, { name: "jQuery", level: 2 }, { name: "Bootstrap", level: 2 }, { name: "Web-Audio", level: 2 }, { name: "Chrome Extensions", level: 1 }, { name: "SQL", level: 1 }, { name: "WebSockets", level: 1 }, { name: "MIDI", level: 1 }, { name: "Java", level: 1 }, { name: "C++", level: 1 }];

	//create nodes
	var nodes = d3.range(skills.length).map(function (i) {
		return {
			radius: skills[i].level * 18 + 14,
			label: skills[i].name,
			skillLevel: skills[i].level
		};
	});

	var root = nodes[0],
	    colors = ['#7FFFD4', '#E0FFFF', '#33CCFF', '#C688E8', '#FF807D', '#FF8EB2'];
	root.radius = 0;
	root.fixed = true;

	var groups = svg.selectAll("g").data(nodes.slice(1)).enter().append("g");

	var circles = groups.append('circle').data(nodes.slice(1)).attr("r", function (d) {
		return d.radius;
	}).style("fill", function (d, i) {
		return colors[i % 6];
	});

	var label = groups.append("text").text(function (d) {
		return d.label;
	}).attr({
		"alignment-baseline": "middle",
		"text-anchor": "middle"
	});

	var force = d3.layout.force().gravity(0.05).charge(function (d, i) {
		return i ? 0 : -3000;
	}).nodes(nodes).size([width - 200, height - 300]);

	force.start();

	force.on("tick", function (e) {
		var q = d3.geom.quadtree(nodes),
		    i = 0,
		    n = nodes.length;

		while (++i < n) q.visit(collide(nodes[i]));

		svg.selectAll("circle").attr("cx", function (d) {
			return d.x;
		}).attr("cy", function (d) {
			return d.y;
		});

		svg.selectAll("text").attr("x", function (d) {
			return d.x;
		}).attr("y", function (d) {
			return d.y;
		});
	});

	svg.on("mousemove", function () {
		var p1 = d3.mouse(this);
		root.px = p1[0];
		root.py = p1[1];
		force.resume();
	});

	//So they don't all start out in a straight line
	root.px = 1;
	root.py = 1;

	function collide(node) {
		var r = node.radius + 16,
		    nx1 = node.x - r,
		    nx2 = node.x + r,
		    ny1 = node.y - r,
		    ny2 = node.y + r;
		return function (quad, x1, y1, x2, y2) {
			if (quad.point && quad.point !== node) {
				var x = node.x - quad.point.x,
				    y = node.y - quad.point.y,
				    l = Math.sqrt(x * x + y * y),
				    r = node.radius + quad.point.radius;

				if (l < r) {
					l = (l - r) / l * 0.5;
					node.x -= x *= l;
					node.y -= y *= l;
					quad.point.x += x;
					quad.point.y += y;
				}
			}
			return x1 > nx2 || x2 < nx1 || y1 > ny2 || y2 < ny1;
		};
	}

	// });
});

app.controller('contactCtrl', function ($scope, $http) {
	$scope.formData = {};

	$scope.sendMail = function () {
		$scope.waiting = true;
		$scope.sent = false;
		$scope.success = false;
		$http.post('/api/contact', $scope.formData).then(function (successResponse) {
			console.log(successResponse);
			$scope.waiting = false;
			$scope.sent = true;
			$scope.success = successResponse.data;
			$scope.formData = {};
		});
	};

	var card = $('#card');
	var note = $('.note');
	var arrow = $('#arrow');
	var toggle = true;

	arrow.click(function () {
		if (toggle) {
			card.removeClass('hidden').removeClass('initial').addClass('visible');
			// arrow.css({'display' : 'none'});

			// note.css({'display': 'initial'});
			setTimeout(explode, 500);
			setTimeout(function () {
				$('#canvas').css({ 'display': 'none' });
				// arrow.css({'display' : 'initial'});
			}, 4000);
		} else {
			card.removeClass('visible').addClass('hidden');

			// note.css({'display': 'none'});
		}
		toggle = !toggle;
	});

	function explode() {

		$('#canvas').css({ 'display': 'initial' });

		var requestId;

		var canvas = document.getElementById("canvas"),
		    context = canvas.getContext("2d"),
		    width = canvas.width = window.innerWidth,
		    height = canvas.height = window.innerHeight,
		    particle = [],
		    particleCount = 0,
		    gravity = 0.3,
		    colors =
		// [
		// 	'#f44336', '#e91e63', '#9c27b0', '#673ab7', '#3f51b5',
		// 	'#2196f3', '#03a9f4', '#00bcd4', '#009688', '#4CAF50',
		// 	'#8BC34A', '#CDDC39', '#FFEB3B', '#FFC107', '#FF9800',
		// 	'#FF5722', '#795548'
		// ];
		['#7FFFD4', '#E0FFFF', '#33CCFF', '#C688E8', '#FF807D', '#FF8EB2'];

		for (var i = 0; i < 50; i++) {
			particle.push({
				x: width / 2,
				y: height / 2,
				boxW: randomRange(5, 20),
				boxH: randomRange(5, 20),
				size: randomRange(2, 8),

				spikeran: randomRange(3, 5),

				velX: randomRange(-8, 8),
				velY: randomRange(-50, -10),

				angle: convertToRadians(randomRange(0, 360)),
				color: colors[Math.floor(Math.random() * colors.length)],
				anglespin: randomRange(-0.2, 0.2),

				draw: draw
			});
		}

		var r1 = {
			x: width / 2 - 150,
			y: height / 2 - 150,
			width: 300,
			height: 300,
			velX: 0,
			velY: -10,
			alphatop: 0
		};

		function drawScreen() {
			var size = 50;
			if (r1.alphatop < 1) {
				r1.alphatop += 0.01;
			} else {
				r1.alphatop = 1;
			}
			context.globalAlpha = r1.alphatop;

			if (r1.alphatop === 1) {
				r1.velY *= 0.999;
				r1.velY += 0.3;
				r1.x += r1.velX;
				r1.y += r1.velY;
			}

			if (r1.y + r1.height > height) {
				r1.anglespin = 0;
				r1.y = height - r1.height;
				r1.velY *= -0.8;
				r1.velX *= 0.9;
			}

			context.globalAlpha = 1;

			for (var i = 0; i < particle.length; i++) {
				particle[i].draw();
			}
		}

		function update() {
			context.clearRect(0, 0, width, height);
			drawScreen();
			requestId = requestAnimationFrame(update);
		}

		update();

		setTimeout(function () {
			window.cancelAnimationFrame(requestId);
			requestId = undefined;
		}, 5000);

		function randomRange(min, max) {
			return min + Math.random() * (max - min);
		}

		function randomInt(min, max) {
			return Math.floor(min + Math.random() * (max - min + 1));
		}

		function convertToRadians(degree) {
			return degree * (Math.PI / 180);
		}

		function drawStar(cx, cy, spikes, outerRadius, innerRadius, color) {
			var rot = Math.PI / 2 * 3;
			var x = cx;
			var y = cy;
			var step = Math.PI / spikes;

			context.strokeSyle = "#000";
			context.beginPath();
			context.moveTo(cx, cy - outerRadius);
			for (i = 0; i < spikes; i++) {
				x = cx + Math.cos(rot) * outerRadius;
				y = cy + Math.sin(rot) * outerRadius;
				context.lineTo(x, y);
				rot += step;

				x = cx + Math.cos(rot) * innerRadius;
				y = cy + Math.sin(rot) * innerRadius;
				context.lineTo(x, y);
				rot += step;
			}

			context.lineTo(cx, cy - outerRadius);
			context.closePath();
			context.fillStyle = color;
			context.fill();
		}

		function draw() {
			context.save();
			context.translate(this.x, this.y);
			context.rotate(this.angle);
			context.fillStyle = this.color;
			context.beginPath();
			// drawStar(0, 0, 5, this.boxW, this.boxH);
			context.fillRect(this.boxW / 2 * -1, this.boxH / 2 * -1, this.boxW, this.boxH);
			context.fill();
			context.closePath();
			context.restore();
			this.angle += this.anglespin;
			this.velY *= 0.999;
			this.velY += 0.3;
			this.x += this.velX;
			this.y += this.velY;

			if (this.y < 0) {
				this.velY *= -0.2;
				this.velX *= 0.9;
			}
			if (this.y > height) {
				this.anglespin = 0;
				this.y = height;
				this.velY *= -0.2;
				this.velX *= 0.9;
			}
			if (this.x > width || this.x < 0) {
				this.velX *= -0.5;
			}
		}
	}
});

app.config(function ($stateProvider) {
	$stateProvider.state('home', {
		url: '/',
		templateUrl: '/js/templates/home.html',
		controller: 'homeCtrl'
	}).state('projects', {
		url: '/projects',
		templateUrl: '/js/templates/projects.html',
		controller: 'projectCtrl'
	}).state('about', {
		url: '/about',
		templateUrl: '/js/templates/about.html',
		controller: 'aboutCtrl'
	}).state('contact', {
		url: '/contact',
		templateUrl: '/js/templates/contact.html',
		controller: 'contactCtrl'
	});
});

app.controller('homeCtrl', function () {
	var increment = 0;
	var carousel = $('#carousel');
	var current = '#fig-1';
	var prev;
	setInterval(function () {
		increment++;
		carousel.css({
			'-webkit-transform': 'rotateX(' + increment * -60 + 'deg)'
		});
		carousel.attr('data-state', increment % 6 + 1);

		prev = current;
		current = '#fig-' + (increment % 6 + 1);
	}, 1500);

	// var circle1 = $('#circle-1');
	// console.log('$circle-1', circle1);
	// var circle2 = $('#circle-2');
	// // var circle3 = $('#circle-3');
	//
	// circle1.click(function(){
	// 	circle1.addClass('spin-clockwise');
	// 	setTimeout(function(){
	// 		circle2.addClass('spin-counterclockwise');
	// 	},500);
	// });
});

app.controller('projectCtrl', function ($scope) {
	$(document).ready(function () {

		var curPage = 1;
		var numOfPages = $(".skw-page").length;
		var animTime = 1000;
		var scrolling = false;
		var pgPrefix = ".skw-page-";
		var progPrefix = "#p";

		function pagination() {
			scrolling = true;

			$(pgPrefix + curPage).removeClass("inactive").addClass("active");
			$(progPrefix + curPage).addClass("current");
			setTimeout(function () {
				scrolling = false;
			}, animTime);
		}

		function navigateUp() {
			if (curPage === 1) return;
			curPage--;
			$(pgPrefix + (curPage + 1)).removeClass("active");
			$(progPrefix + (curPage + 1)).removeClass("current");

			pagination();
		}

		function navigateDown() {
			if (curPage === numOfPages) return;
			curPage++;
			$(pgPrefix + (curPage - 1)).removeClass("active");
			$(progPrefix + (curPage - 1)).removeClass("current");
			pagination();
		}

		$(document).on("mousewheel DOMMouseScroll", function (e) {
			if (scrolling) return;
			if (e.originalEvent.wheelDelta > 0 || e.originalEvent.detail < 0) {
				navigateUp();
			} else {
				navigateDown();
			}
		});

		$(document).on("keydown", function (e) {
			if (scrolling) return;
			if (e.which === 38) {
				navigateUp();
			} else if (e.which === 40) {
				navigateDown();
			}
		});
	});
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsImFib3V0LmpzIiwiY29udGFjdC5qcyIsImhvbWUuanMiLCJwcm9qZWN0LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsTUFBQSxDQUFBLEdBQUEsR0FBQSxPQUFBLENBQUEsTUFBQSxDQUFBLFdBQUEsRUFBQSxDQUFBLFdBQUEsQ0FBQSxDQUFBLENBQUE7O0FBRUEsR0FBQSxDQUFBLE1BQUEsQ0FBQSxVQUFBLGtCQUFBLEVBQUEsaUJBQUEsRUFBQSwwQkFBQSxFQUFBOzs7QUFHQSxtQkFBQSxDQUFBLElBQUEsQ0FBQSxVQUFBLFNBQUEsRUFBQSxTQUFBLEVBQUE7O0FBRUEsTUFBQSxFQUFBLEdBQUEsbUJBQUEsQ0FBQTtBQUNBLE1BQUEsSUFBQSxHQUFBLFNBQUEsQ0FBQSxHQUFBLEVBQUEsQ0FBQTs7QUFFQSxNQUFBLEVBQUEsQ0FBQSxJQUFBLENBQUEsSUFBQSxDQUFBLEVBQUE7QUFDQSxVQUFBLElBQUEsQ0FBQSxPQUFBLENBQUEsRUFBQSxFQUFBLE1BQUEsQ0FBQSxDQUFBO0dBQ0E7O0FBRUEsU0FBQSxLQUFBLENBQUE7RUFDQSxDQUFBOztBQUFBLEFBRUEsa0JBQUEsQ0FBQSxTQUFBLENBQUEsSUFBQSxDQUFBLENBQUE7QUFDQSxtQkFBQSxDQUFBLElBQUEsQ0FBQSxpQkFBQSxFQUFBLFlBQUE7QUFDQSxRQUFBLENBQUEsUUFBQSxDQUFBLE1BQUEsRUFBQSxDQUFBO0VBQ0EsQ0FBQTs7QUFBQSxBQUVBLG1CQUFBLENBQUEsU0FBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBO0NBQ0EsQ0FBQSxDQUFBOztBQ3ZCQSxHQUFBLENBQUEsVUFBQSxDQUFBLFdBQUEsRUFBQSxVQUFBLE1BQUEsRUFBQTs7O0FBR0EsS0FBQSxXQUFBLEdBQUEsQ0FBQSxDQUFBLGVBQUEsQ0FBQSxDQUFBO0FBQ0EsS0FBQSxLQUFBLEdBQUEsV0FBQSxDQUFBLEtBQUEsRUFBQSxDQUFBO0FBQ0EsS0FBQSxNQUFBLEdBQUEsV0FBQSxDQUFBLE1BQUEsRUFBQSxDQUFBOztBQUVBLEtBQUEsR0FBQSxHQUFBLEVBQUEsQ0FBQSxNQUFBLENBQUEsZUFBQSxDQUFBLENBQUEsTUFBQSxDQUFBLEtBQUEsQ0FBQSxDQUFBOztBQUVBLEtBQUEsTUFBQSxHQUFBLENBQ0EsRUFBQSxJQUFBLEVBQUEsWUFBQSxFQUFBLEtBQUEsRUFBQSxDQUFBLEVBQUEsRUFDQSxFQUFBLElBQUEsRUFBQSxTQUFBLEVBQUEsS0FBQSxFQUFBLENBQUEsRUFBQSxFQUNBLEVBQUEsSUFBQSxFQUFBLFlBQUEsRUFBQSxLQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQ0EsRUFBQSxJQUFBLEVBQUEsWUFBQSxFQUFBLEtBQUEsRUFBQSxDQUFBLEVBQUEsRUFDQSxFQUFBLElBQUEsRUFBQSxTQUFBLEVBQUEsS0FBQSxFQUFBLENBQUEsRUFBQSxFQUNBLEVBQUEsSUFBQSxFQUFBLGFBQUEsRUFBQSxLQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQ0EsRUFBQSxJQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxDQUFBLEVBQUEsRUFDQSxFQUFBLElBQUEsRUFBQSxNQUFBLEVBQUEsS0FBQSxFQUFBLENBQUEsRUFBQSxFQUNBLEVBQUEsSUFBQSxFQUFBLE9BQUEsRUFBQSxLQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQ0EsRUFBQSxJQUFBLEVBQUEsa0JBQUEsRUFBQSxLQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQ0EsRUFBQSxJQUFBLEVBQUEsTUFBQSxFQUFBLEtBQUEsRUFBQSxDQUFBLEVBQUEsRUFDQSxFQUFBLElBQUEsRUFBQSxjQUFBLEVBQUEsS0FBQSxFQUFBLENBQUEsRUFBQSxFQUNBLEVBQUEsSUFBQSxFQUFBLFFBQUEsRUFBQSxLQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQ0EsRUFBQSxJQUFBLEVBQUEsV0FBQSxFQUFBLEtBQUEsRUFBQSxDQUFBLEVBQUEsRUFDQSxFQUFBLElBQUEsRUFBQSxXQUFBLEVBQUEsS0FBQSxFQUFBLENBQUEsRUFBQSxFQUNBLEVBQUEsSUFBQSxFQUFBLG1CQUFBLEVBQUEsS0FBQSxFQUFBLENBQUEsRUFBQSxFQUNBLEVBQUEsSUFBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQ0EsRUFBQSxJQUFBLEVBQUEsWUFBQSxFQUFBLEtBQUEsRUFBQSxDQUFBLEVBQUEsRUFDQSxFQUFBLElBQUEsRUFBQSxNQUFBLEVBQUEsS0FBQSxFQUFBLENBQUEsRUFBQSxFQUNBLEVBQUEsSUFBQSxFQUFBLE1BQUEsRUFBQSxLQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQ0EsRUFBQSxJQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxDQUFBLEVBQUEsQ0FDQTs7O0FBQUEsQUFHQSxLQUFBLEtBQUEsR0FBQSxFQUFBLENBQUEsS0FBQSxDQUFBLE1BQUEsQ0FBQSxNQUFBLENBQUEsQ0FBQSxHQUFBLENBQUEsVUFBQSxDQUFBLEVBQUE7QUFDQSxTQUFBO0FBQ0EsU0FBQSxFQUFBLE1BQUEsQ0FBQSxDQUFBLENBQUEsQ0FBQSxLQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUE7QUFDQSxRQUFBLEVBQUEsTUFBQSxDQUFBLENBQUEsQ0FBQSxDQUFBLElBQUE7QUFDQSxhQUFBLEVBQUEsTUFBQSxDQUFBLENBQUEsQ0FBQSxDQUFBLEtBQUE7R0FDQSxDQUFBO0VBQ0EsQ0FBQSxDQUFBOztBQUVBLEtBQUEsSUFBQSxHQUFBLEtBQUEsQ0FBQSxDQUFBLENBQUE7S0FDQSxNQUFBLEdBQUEsQ0FBQSxTQUFBLEVBQUEsU0FBQSxFQUFBLFNBQUEsRUFBQSxTQUFBLEVBQUEsU0FBQSxFQUFBLFNBQUEsQ0FBQSxDQUFBO0FBQ0EsS0FBQSxDQUFBLE1BQUEsR0FBQSxDQUFBLENBQUE7QUFDQSxLQUFBLENBQUEsS0FBQSxHQUFBLElBQUEsQ0FBQTs7QUFFQSxLQUFBLE1BQUEsR0FBQSxHQUFBLENBQUEsU0FBQSxDQUFBLEdBQUEsQ0FBQSxDQUNBLElBQUEsQ0FBQSxLQUFBLENBQUEsS0FBQSxDQUFBLENBQUEsQ0FBQSxDQUFBLENBQ0EsS0FBQSxFQUFBLENBQ0EsTUFBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBOztBQUVBLEtBQUEsT0FBQSxHQUFBLE1BQUEsQ0FBQSxNQUFBLENBQUEsUUFBQSxDQUFBLENBQ0EsSUFBQSxDQUFBLEtBQUEsQ0FBQSxLQUFBLENBQUEsQ0FBQSxDQUFBLENBQUEsQ0FDQSxJQUFBLENBQUEsR0FBQSxFQUFBLFVBQUEsQ0FBQSxFQUFBO0FBQUEsU0FBQSxDQUFBLENBQUEsTUFBQSxDQUFBO0VBQUEsQ0FBQSxDQUNBLEtBQUEsQ0FBQSxNQUFBLEVBQUEsVUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBO0FBQ0EsU0FBQSxNQUFBLENBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxDQUFBO0VBQ0EsQ0FBQSxDQUFBOztBQUVBLEtBQUEsS0FBQSxHQUFBLE1BQUEsQ0FBQSxNQUFBLENBQUEsTUFBQSxDQUFBLENBQ0EsSUFBQSxDQUFBLFVBQUEsQ0FBQSxFQUFBO0FBQ0EsU0FBQSxDQUFBLENBQUEsS0FBQSxDQUFBO0VBQ0EsQ0FBQSxDQUNBLElBQUEsQ0FBQTtBQUNBLHNCQUFBLEVBQUEsUUFBQTtBQUNBLGVBQUEsRUFBQSxRQUFBO0VBQ0EsQ0FBQSxDQUFBOztBQUVBLEtBQUEsS0FBQSxHQUFBLEVBQUEsQ0FBQSxNQUFBLENBQUEsS0FBQSxFQUFBLENBQ0EsT0FBQSxDQUFBLElBQUEsQ0FBQSxDQUNBLE1BQUEsQ0FBQSxVQUFBLENBQUEsRUFBQSxDQUFBLEVBQUE7QUFBQSxTQUFBLENBQUEsR0FBQSxDQUFBLEdBQUEsQ0FBQSxJQUFBLENBQUE7RUFBQSxDQUFBLENBQ0EsS0FBQSxDQUFBLEtBQUEsQ0FBQSxDQUNBLElBQUEsQ0FBQSxDQUFBLEtBQUEsR0FBQSxHQUFBLEVBQUEsTUFBQSxHQUFBLEdBQUEsQ0FBQSxDQUFBLENBQUE7O0FBRUEsTUFBQSxDQUFBLEtBQUEsRUFBQSxDQUFBOztBQUVBLE1BQUEsQ0FBQSxFQUFBLENBQUEsTUFBQSxFQUFBLFVBQUEsQ0FBQSxFQUFBO0FBQ0EsTUFBQSxDQUFBLEdBQUEsRUFBQSxDQUFBLElBQUEsQ0FBQSxRQUFBLENBQUEsS0FBQSxDQUFBO01BQ0EsQ0FBQSxHQUFBLENBQUE7TUFDQSxDQUFBLEdBQUEsS0FBQSxDQUFBLE1BQUEsQ0FBQTs7QUFFQSxTQUFBLEVBQUEsQ0FBQSxHQUFBLENBQUEsRUFBQSxDQUFBLENBQUEsS0FBQSxDQUFBLE9BQUEsQ0FBQSxLQUFBLENBQUEsQ0FBQSxDQUFBLENBQUEsQ0FBQSxDQUFBOztBQUVBLEtBQUEsQ0FBQSxTQUFBLENBQUEsUUFBQSxDQUFBLENBQ0EsSUFBQSxDQUFBLElBQUEsRUFBQSxVQUFBLENBQUEsRUFBQTtBQUFBLFVBQUEsQ0FBQSxDQUFBLENBQUEsQ0FBQTtHQUFBLENBQUEsQ0FDQSxJQUFBLENBQUEsSUFBQSxFQUFBLFVBQUEsQ0FBQSxFQUFBO0FBQUEsVUFBQSxDQUFBLENBQUEsQ0FBQSxDQUFBO0dBQUEsQ0FBQSxDQUFBOztBQUVBLEtBQUEsQ0FBQSxTQUFBLENBQUEsTUFBQSxDQUFBLENBQ0EsSUFBQSxDQUFBLEdBQUEsRUFBQSxVQUFBLENBQUEsRUFBQTtBQUFBLFVBQUEsQ0FBQSxDQUFBLENBQUEsQ0FBQTtHQUFBLENBQUEsQ0FDQSxJQUFBLENBQUEsR0FBQSxFQUFBLFVBQUEsQ0FBQSxFQUFBO0FBQUEsVUFBQSxDQUFBLENBQUEsQ0FBQSxDQUFBO0dBQUEsQ0FBQSxDQUFBO0VBQ0EsQ0FBQSxDQUFBOztBQUVBLElBQUEsQ0FBQSxFQUFBLENBQUEsV0FBQSxFQUFBLFlBQUE7QUFDQSxNQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsS0FBQSxDQUFBLElBQUEsQ0FBQSxDQUFBO0FBQ0EsTUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsQ0FBQSxDQUFBLENBQUE7QUFDQSxNQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsQ0FBQSxDQUFBLENBQUEsQ0FBQTtBQUNBLE9BQUEsQ0FBQSxNQUFBLEVBQUEsQ0FBQTtFQUNBLENBQUE7OztBQUFBLEFBR0EsS0FBQSxDQUFBLEVBQUEsR0FBQSxDQUFBLENBQUE7QUFDQSxLQUFBLENBQUEsRUFBQSxHQUFBLENBQUEsQ0FBQTs7QUFFQSxVQUFBLE9BQUEsQ0FBQSxJQUFBLEVBQUE7QUFDQSxNQUFBLENBQUEsR0FBQSxJQUFBLENBQUEsTUFBQSxHQUFBLEVBQUE7TUFDQSxHQUFBLEdBQUEsSUFBQSxDQUFBLENBQUEsR0FBQSxDQUFBO01BQ0EsR0FBQSxHQUFBLElBQUEsQ0FBQSxDQUFBLEdBQUEsQ0FBQTtNQUNBLEdBQUEsR0FBQSxJQUFBLENBQUEsQ0FBQSxHQUFBLENBQUE7TUFDQSxHQUFBLEdBQUEsSUFBQSxDQUFBLENBQUEsR0FBQSxDQUFBLENBQUE7QUFDQSxTQUFBLFVBQUEsSUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQTtBQUNBLE9BQUEsSUFBQSxDQUFBLEtBQUEsSUFBQSxJQUFBLENBQUEsS0FBQSxLQUFBLElBQUEsRUFBQTtBQUNBLFFBQUEsQ0FBQSxHQUFBLElBQUEsQ0FBQSxDQUFBLEdBQUEsSUFBQSxDQUFBLEtBQUEsQ0FBQSxDQUFBO1FBQ0EsQ0FBQSxHQUFBLElBQUEsQ0FBQSxDQUFBLEdBQUEsSUFBQSxDQUFBLEtBQUEsQ0FBQSxDQUFBO1FBQ0EsQ0FBQSxHQUFBLElBQUEsQ0FBQSxJQUFBLENBQUEsQ0FBQSxHQUFBLENBQUEsR0FBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBO1FBQ0EsQ0FBQSxHQUFBLElBQUEsQ0FBQSxNQUFBLEdBQUEsSUFBQSxDQUFBLEtBQUEsQ0FBQSxNQUFBLENBQUE7O0FBRUEsUUFBQSxDQUFBLEdBQUEsQ0FBQSxFQUFBO0FBQ0EsTUFBQSxHQUFBLENBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxHQUFBLENBQUEsR0FBQSxHQUFBLENBQUE7QUFDQSxTQUFBLENBQUEsQ0FBQSxJQUFBLENBQUEsSUFBQSxDQUFBLENBQUE7QUFDQSxTQUFBLENBQUEsQ0FBQSxJQUFBLENBQUEsSUFBQSxDQUFBLENBQUE7QUFDQSxTQUFBLENBQUEsS0FBQSxDQUFBLENBQUEsSUFBQSxDQUFBLENBQUE7QUFDQSxTQUFBLENBQUEsS0FBQSxDQUFBLENBQUEsSUFBQSxDQUFBLENBQUE7S0FDQTtJQUNBO0FBQ0EsVUFBQSxFQUFBLEdBQUEsR0FBQSxJQUFBLEVBQUEsR0FBQSxHQUFBLElBQUEsRUFBQSxHQUFBLEdBQUEsSUFBQSxFQUFBLEdBQUEsR0FBQSxDQUFBO0dBQ0EsQ0FBQTtFQUNBOzs7Q0FJQSxDQUFBLENBQUE7QUFKQTtBQzlIQSxHQUFBLENBQUEsVUFBQSxDQUFBLGFBQUEsRUFBQSxVQUFBLE1BQUEsRUFBQSxLQUFBLEVBQUE7QUFDQSxPQUFBLENBQUEsUUFBQSxHQUFBLEVBQUEsQ0FBQTs7QUFFQSxPQUFBLENBQUEsUUFBQSxHQUFBLFlBQUE7QUFDQSxRQUFBLENBQUEsT0FBQSxHQUFBLElBQUEsQ0FBQTtBQUNBLFFBQUEsQ0FBQSxJQUFBLEdBQUEsS0FBQSxDQUFBO0FBQ0EsUUFBQSxDQUFBLE9BQUEsR0FBQSxLQUFBLENBQUE7QUFDQSxPQUFBLENBQUEsSUFBQSxDQUFBLGNBQUEsRUFBQSxNQUFBLENBQUEsUUFBQSxDQUFBLENBQ0EsSUFBQSxDQUFBLFVBQUEsZUFBQSxFQUFBO0FBQ0EsVUFBQSxDQUFBLEdBQUEsQ0FBQSxlQUFBLENBQUEsQ0FBQTtBQUNBLFNBQUEsQ0FBQSxPQUFBLEdBQUEsS0FBQSxDQUFBO0FBQ0EsU0FBQSxDQUFBLElBQUEsR0FBQSxJQUFBLENBQUE7QUFDQSxTQUFBLENBQUEsT0FBQSxHQUFBLGVBQUEsQ0FBQSxJQUFBLENBQUE7QUFDQSxTQUFBLENBQUEsUUFBQSxHQUFBLEVBQUEsQ0FBQTtHQUNBLENBQUEsQ0FBQTtFQUNBLENBQUE7O0FBRUEsS0FBQSxJQUFBLEdBQUEsQ0FBQSxDQUFBLE9BQUEsQ0FBQSxDQUFBO0FBQ0EsS0FBQSxJQUFBLEdBQUEsQ0FBQSxDQUFBLE9BQUEsQ0FBQSxDQUFBO0FBQ0EsS0FBQSxLQUFBLEdBQUEsQ0FBQSxDQUFBLFFBQUEsQ0FBQSxDQUFBO0FBQ0EsS0FBQSxNQUFBLEdBQUEsSUFBQSxDQUFBOztBQUVBLE1BQUEsQ0FBQSxLQUFBLENBQUEsWUFBQTtBQUNBLE1BQUEsTUFBQSxFQUFBO0FBQ0EsT0FBQSxDQUFBLFdBQUEsQ0FBQSxRQUFBLENBQUEsQ0FBQSxXQUFBLENBQUEsU0FBQSxDQUFBLENBQUEsUUFBQSxDQUFBLFNBQUEsQ0FBQTs7OztBQUFBLEFBS0EsYUFBQSxDQUFBLE9BQUEsRUFBQSxHQUFBLENBQUEsQ0FBQTtBQUNBLGFBQUEsQ0FBQSxZQUFBO0FBQ0EsS0FBQSxDQUFBLFNBQUEsQ0FBQSxDQUFBLEdBQUEsQ0FBQSxFQUFBLFNBQUEsRUFBQSxNQUFBLEVBQUEsQ0FBQTs7SUFHQSxFQUFBLElBQUEsQ0FBQSxDQUFBO0FBSEEsR0FJQSxNQUFBO0FBQ0EsT0FBQSxDQUFBLFdBQUEsQ0FBQSxTQUFBLENBQUEsQ0FBQSxRQUFBLENBQUEsUUFBQSxDQUFBOzs7QUFBQSxHQUlBO0FBQ0EsUUFBQSxHQUFBLENBQUEsTUFBQSxDQUFBO0VBQ0EsQ0FBQSxDQUFBOztBQUdBLFVBQUEsT0FBQSxHQUFBOztBQUVBLEdBQUEsQ0FBQSxTQUFBLENBQUEsQ0FBQSxHQUFBLENBQUEsRUFBQSxTQUFBLEVBQUEsU0FBQSxFQUFBLENBQUEsQ0FBQTs7QUFFQSxNQUFBLFNBQUEsQ0FBQTs7QUFFQSxNQUFBLE1BQUEsR0FBQSxRQUFBLENBQUEsY0FBQSxDQUFBLFFBQUEsQ0FBQTtNQUNBLE9BQUEsR0FBQSxNQUFBLENBQUEsVUFBQSxDQUFBLElBQUEsQ0FBQTtNQUNBLEtBQUEsR0FBQSxNQUFBLENBQUEsS0FBQSxHQUFBLE1BQUEsQ0FBQSxVQUFBO01BQ0EsTUFBQSxHQUFBLE1BQUEsQ0FBQSxNQUFBLEdBQUEsTUFBQSxDQUFBLFdBQUE7TUFDQSxRQUFBLEdBQUEsRUFBQTtNQUNBLGFBQUEsR0FBQSxDQUFBO01BQ0EsT0FBQSxHQUFBLEdBQUE7TUFDQSxNQUFBOzs7Ozs7O0FBT0EsR0FBQSxTQUFBLEVBQUEsU0FBQSxFQUFBLFNBQUEsRUFBQSxTQUFBLEVBQUEsU0FBQSxFQUFBLFNBQUEsQ0FBQSxDQUFBOztBQUVBLE9BQUEsSUFBQSxDQUFBLEdBQUEsQ0FBQSxFQUFBLENBQUEsR0FBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUE7QUFDQSxXQUFBLENBQUEsSUFBQSxDQUFBO0FBQ0EsS0FBQSxFQUFBLEtBQUEsR0FBQSxDQUFBO0FBQ0EsS0FBQSxFQUFBLE1BQUEsR0FBQSxDQUFBO0FBQ0EsUUFBQSxFQUFBLFdBQUEsQ0FBQSxDQUFBLEVBQUEsRUFBQSxDQUFBO0FBQ0EsUUFBQSxFQUFBLFdBQUEsQ0FBQSxDQUFBLEVBQUEsRUFBQSxDQUFBO0FBQ0EsUUFBQSxFQUFBLFdBQUEsQ0FBQSxDQUFBLEVBQUEsQ0FBQSxDQUFBOztBQUVBLFlBQUEsRUFBQSxXQUFBLENBQUEsQ0FBQSxFQUFBLENBQUEsQ0FBQTs7QUFFQSxRQUFBLEVBQUEsV0FBQSxDQUFBLENBQUEsQ0FBQSxFQUFBLENBQUEsQ0FBQTtBQUNBLFFBQUEsRUFBQSxXQUFBLENBQUEsQ0FBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUE7O0FBRUEsU0FBQSxFQUFBLGdCQUFBLENBQUEsV0FBQSxDQUFBLENBQUEsRUFBQSxHQUFBLENBQUEsQ0FBQTtBQUNBLFNBQUEsRUFBQSxNQUFBLENBQUEsSUFBQSxDQUFBLEtBQUEsQ0FBQSxJQUFBLENBQUEsTUFBQSxFQUFBLEdBQUEsTUFBQSxDQUFBLE1BQUEsQ0FBQSxDQUFBO0FBQ0EsYUFBQSxFQUFBLFdBQUEsQ0FBQSxDQUFBLEdBQUEsRUFBQSxHQUFBLENBQUE7O0FBRUEsUUFBQSxFQUFBLElBQUE7SUFDQSxDQUFBLENBQUE7R0FDQTs7QUFFQSxNQUFBLEVBQUEsR0FBQTtBQUNBLElBQUEsRUFBQSxLQUFBLEdBQUEsQ0FBQSxHQUFBLEdBQUE7QUFDQSxJQUFBLEVBQUEsTUFBQSxHQUFBLENBQUEsR0FBQSxHQUFBO0FBQ0EsUUFBQSxFQUFBLEdBQUE7QUFDQSxTQUFBLEVBQUEsR0FBQTtBQUNBLE9BQUEsRUFBQSxDQUFBO0FBQ0EsT0FBQSxFQUFBLENBQUEsRUFBQTtBQUNBLFdBQUEsRUFBQSxDQUFBO0dBQ0EsQ0FBQTs7QUFHQSxXQUFBLFVBQUEsR0FBQTtBQUNBLE9BQUEsSUFBQSxHQUFBLEVBQUEsQ0FBQTtBQUNBLE9BQUEsRUFBQSxDQUFBLFFBQUEsR0FBQSxDQUFBLEVBQUE7QUFDQSxNQUFBLENBQUEsUUFBQSxJQUFBLElBQUEsQ0FBQTtJQUNBLE1BQUE7QUFDQSxNQUFBLENBQUEsUUFBQSxHQUFBLENBQUEsQ0FBQTtJQUNBO0FBQ0EsVUFBQSxDQUFBLFdBQUEsR0FBQSxFQUFBLENBQUEsUUFBQSxDQUFBOztBQUVBLE9BQUEsRUFBQSxDQUFBLFFBQUEsS0FBQSxDQUFBLEVBQUE7QUFDQSxNQUFBLENBQUEsSUFBQSxJQUFBLEtBQUEsQ0FBQTtBQUNBLE1BQUEsQ0FBQSxJQUFBLElBQUEsR0FBQSxDQUFBO0FBQ0EsTUFBQSxDQUFBLENBQUEsSUFBQSxFQUFBLENBQUEsSUFBQSxDQUFBO0FBQ0EsTUFBQSxDQUFBLENBQUEsSUFBQSxFQUFBLENBQUEsSUFBQSxDQUFBO0lBQ0E7O0FBRUEsT0FBQSxFQUFBLENBQUEsQ0FBQSxHQUFBLEVBQUEsQ0FBQSxNQUFBLEdBQUEsTUFBQSxFQUFBO0FBQ0EsTUFBQSxDQUFBLFNBQUEsR0FBQSxDQUFBLENBQUE7QUFDQSxNQUFBLENBQUEsQ0FBQSxHQUFBLE1BQUEsR0FBQSxFQUFBLENBQUEsTUFBQSxDQUFBO0FBQ0EsTUFBQSxDQUFBLElBQUEsSUFBQSxDQUFBLEdBQUEsQ0FBQTtBQUNBLE1BQUEsQ0FBQSxJQUFBLElBQUEsR0FBQSxDQUFBO0lBQ0E7O0FBRUEsVUFBQSxDQUFBLFdBQUEsR0FBQSxDQUFBLENBQUE7O0FBRUEsUUFBQSxJQUFBLENBQUEsR0FBQSxDQUFBLEVBQUEsQ0FBQSxHQUFBLFFBQUEsQ0FBQSxNQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUE7QUFDQSxZQUFBLENBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxFQUFBLENBQUE7SUFDQTtHQUNBOztBQUVBLFdBQUEsTUFBQSxHQUFBO0FBQ0EsVUFBQSxDQUFBLFNBQUEsQ0FBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLEtBQUEsRUFBQSxNQUFBLENBQUEsQ0FBQTtBQUNBLGFBQUEsRUFBQSxDQUFBO0FBQ0EsWUFBQSxHQUFBLHFCQUFBLENBQUEsTUFBQSxDQUFBLENBQUE7R0FDQTs7QUFFQSxRQUFBLEVBQUEsQ0FBQTs7QUFFQSxZQUFBLENBQUEsWUFBQTtBQUNBLFNBQUEsQ0FBQSxvQkFBQSxDQUFBLFNBQUEsQ0FBQSxDQUFBO0FBQ0EsWUFBQSxHQUFBLFNBQUEsQ0FBQTtHQUNBLEVBQUEsSUFBQSxDQUFBLENBQUE7O0FBRUEsV0FBQSxXQUFBLENBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQTtBQUNBLFVBQUEsR0FBQSxHQUFBLElBQUEsQ0FBQSxNQUFBLEVBQUEsSUFBQSxHQUFBLEdBQUEsR0FBQSxDQUFBLENBQUE7R0FDQTs7QUFFQSxXQUFBLFNBQUEsQ0FBQSxHQUFBLEVBQUEsR0FBQSxFQUFBO0FBQ0EsVUFBQSxJQUFBLENBQUEsS0FBQSxDQUFBLEdBQUEsR0FBQSxJQUFBLENBQUEsTUFBQSxFQUFBLElBQUEsR0FBQSxHQUFBLEdBQUEsR0FBQSxDQUFBLENBQUEsQ0FBQSxDQUFBO0dBQ0E7O0FBRUEsV0FBQSxnQkFBQSxDQUFBLE1BQUEsRUFBQTtBQUNBLFVBQUEsTUFBQSxJQUFBLElBQUEsQ0FBQSxFQUFBLEdBQUEsR0FBQSxDQUFBLENBQUE7R0FDQTs7QUFFQSxXQUFBLFFBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLE1BQUEsRUFBQSxXQUFBLEVBQUEsV0FBQSxFQUFBLEtBQUEsRUFBQTtBQUNBLE9BQUEsR0FBQSxHQUFBLElBQUEsQ0FBQSxFQUFBLEdBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQTtBQUNBLE9BQUEsQ0FBQSxHQUFBLEVBQUEsQ0FBQTtBQUNBLE9BQUEsQ0FBQSxHQUFBLEVBQUEsQ0FBQTtBQUNBLE9BQUEsSUFBQSxHQUFBLElBQUEsQ0FBQSxFQUFBLEdBQUEsTUFBQSxDQUFBOztBQUVBLFVBQUEsQ0FBQSxVQUFBLEdBQUEsTUFBQSxDQUFBO0FBQ0EsVUFBQSxDQUFBLFNBQUEsRUFBQSxDQUFBO0FBQ0EsVUFBQSxDQUFBLE1BQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxHQUFBLFdBQUEsQ0FBQSxDQUFBO0FBQ0EsUUFBQSxDQUFBLEdBQUEsQ0FBQSxFQUFBLENBQUEsR0FBQSxNQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUE7QUFDQSxLQUFBLEdBQUEsRUFBQSxHQUFBLElBQUEsQ0FBQSxHQUFBLENBQUEsR0FBQSxDQUFBLEdBQUEsV0FBQSxDQUFBO0FBQ0EsS0FBQSxHQUFBLEVBQUEsR0FBQSxJQUFBLENBQUEsR0FBQSxDQUFBLEdBQUEsQ0FBQSxHQUFBLFdBQUEsQ0FBQTtBQUNBLFdBQUEsQ0FBQSxNQUFBLENBQUEsQ0FBQSxFQUFBLENBQUEsQ0FBQSxDQUFBO0FBQ0EsT0FBQSxJQUFBLElBQUEsQ0FBQTs7QUFFQSxLQUFBLEdBQUEsRUFBQSxHQUFBLElBQUEsQ0FBQSxHQUFBLENBQUEsR0FBQSxDQUFBLEdBQUEsV0FBQSxDQUFBO0FBQ0EsS0FBQSxHQUFBLEVBQUEsR0FBQSxJQUFBLENBQUEsR0FBQSxDQUFBLEdBQUEsQ0FBQSxHQUFBLFdBQUEsQ0FBQTtBQUNBLFdBQUEsQ0FBQSxNQUFBLENBQUEsQ0FBQSxFQUFBLENBQUEsQ0FBQSxDQUFBO0FBQ0EsT0FBQSxJQUFBLElBQUEsQ0FBQTtJQUNBOztBQUVBLFVBQUEsQ0FBQSxNQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsR0FBQSxXQUFBLENBQUEsQ0FBQTtBQUNBLFVBQUEsQ0FBQSxTQUFBLEVBQUEsQ0FBQTtBQUNBLFVBQUEsQ0FBQSxTQUFBLEdBQUEsS0FBQSxDQUFBO0FBQ0EsVUFBQSxDQUFBLElBQUEsRUFBQSxDQUFBO0dBQ0E7O0FBRUEsV0FBQSxJQUFBLEdBQUE7QUFDQSxVQUFBLENBQUEsSUFBQSxFQUFBLENBQUE7QUFDQSxVQUFBLENBQUEsU0FBQSxDQUFBLElBQUEsQ0FBQSxDQUFBLEVBQUEsSUFBQSxDQUFBLENBQUEsQ0FBQSxDQUFBO0FBQ0EsVUFBQSxDQUFBLE1BQUEsQ0FBQSxJQUFBLENBQUEsS0FBQSxDQUFBLENBQUE7QUFDQSxVQUFBLENBQUEsU0FBQSxHQUFBLElBQUEsQ0FBQSxLQUFBLENBQUE7QUFDQSxVQUFBLENBQUEsU0FBQSxFQUFBOztBQUFBLEFBRUEsVUFBQSxDQUFBLFFBQUEsQ0FBQSxJQUFBLENBQUEsSUFBQSxHQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsRUFBQSxJQUFBLENBQUEsSUFBQSxHQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsRUFBQSxJQUFBLENBQUEsSUFBQSxFQUFBLElBQUEsQ0FBQSxJQUFBLENBQUEsQ0FBQTtBQUNBLFVBQUEsQ0FBQSxJQUFBLEVBQUEsQ0FBQTtBQUNBLFVBQUEsQ0FBQSxTQUFBLEVBQUEsQ0FBQTtBQUNBLFVBQUEsQ0FBQSxPQUFBLEVBQUEsQ0FBQTtBQUNBLE9BQUEsQ0FBQSxLQUFBLElBQUEsSUFBQSxDQUFBLFNBQUEsQ0FBQTtBQUNBLE9BQUEsQ0FBQSxJQUFBLElBQUEsS0FBQSxDQUFBO0FBQ0EsT0FBQSxDQUFBLElBQUEsSUFBQSxHQUFBLENBQUE7QUFDQSxPQUFBLENBQUEsQ0FBQSxJQUFBLElBQUEsQ0FBQSxJQUFBLENBQUE7QUFDQSxPQUFBLENBQUEsQ0FBQSxJQUFBLElBQUEsQ0FBQSxJQUFBLENBQUE7O0FBRUEsT0FBQSxJQUFBLENBQUEsQ0FBQSxHQUFBLENBQUEsRUFBQTtBQUNBLFFBQUEsQ0FBQSxJQUFBLElBQUEsQ0FBQSxHQUFBLENBQUE7QUFDQSxRQUFBLENBQUEsSUFBQSxJQUFBLEdBQUEsQ0FBQTtJQUNBO0FBQ0EsT0FBQSxJQUFBLENBQUEsQ0FBQSxHQUFBLE1BQUEsRUFBQTtBQUNBLFFBQUEsQ0FBQSxTQUFBLEdBQUEsQ0FBQSxDQUFBO0FBQ0EsUUFBQSxDQUFBLENBQUEsR0FBQSxNQUFBLENBQUE7QUFDQSxRQUFBLENBQUEsSUFBQSxJQUFBLENBQUEsR0FBQSxDQUFBO0FBQ0EsUUFBQSxDQUFBLElBQUEsSUFBQSxHQUFBLENBQUE7SUFDQTtBQUNBLE9BQUEsSUFBQSxDQUFBLENBQUEsR0FBQSxLQUFBLElBQUEsSUFBQSxDQUFBLENBQUEsR0FBQSxDQUFBLEVBQUE7QUFDQSxRQUFBLENBQUEsSUFBQSxJQUFBLENBQUEsR0FBQSxDQUFBO0lBQ0E7R0FFQTtFQUNBO0NBRUEsQ0FBQSxDQUFBOztBQ3ZOQSxHQUFBLENBQUEsTUFBQSxDQUFBLFVBQUEsY0FBQSxFQUFBO0FBQ0EsZUFBQSxDQUNBLEtBQUEsQ0FBQSxNQUFBLEVBQUE7QUFDQSxLQUFBLEVBQUEsR0FBQTtBQUNBLGFBQUEsRUFBQSx5QkFBQTtBQUNBLFlBQUEsRUFBQSxVQUFBO0VBQ0EsQ0FBQSxDQUNBLEtBQUEsQ0FBQSxVQUFBLEVBQUE7QUFDQSxLQUFBLEVBQUEsV0FBQTtBQUNBLGFBQUEsRUFBQSw2QkFBQTtBQUNBLFlBQUEsRUFBQSxhQUFBO0VBQ0EsQ0FBQSxDQUNBLEtBQUEsQ0FBQSxPQUFBLEVBQUE7QUFDQSxLQUFBLEVBQUEsUUFBQTtBQUNBLGFBQUEsRUFBQSwwQkFBQTtBQUNBLFlBQUEsRUFBQSxXQUFBO0VBQ0EsQ0FBQSxDQUNBLEtBQUEsQ0FBQSxTQUFBLEVBQUE7QUFDQSxLQUFBLEVBQUEsVUFBQTtBQUNBLGFBQUEsRUFBQSw0QkFBQTtBQUNBLFlBQUEsRUFBQSxhQUFBO0VBQ0EsQ0FBQSxDQUFBO0NBQ0EsQ0FBQSxDQUFBOztBQUVBLEdBQUEsQ0FBQSxVQUFBLENBQUEsVUFBQSxFQUFBLFlBQUE7QUFDQSxLQUFBLFNBQUEsR0FBQSxDQUFBLENBQUE7QUFDQSxLQUFBLFFBQUEsR0FBQSxDQUFBLENBQUEsV0FBQSxDQUFBLENBQUE7QUFDQSxLQUFBLE9BQUEsR0FBQSxRQUFBLENBQUE7QUFDQSxLQUFBLElBQUEsQ0FBQTtBQUNBLFlBQUEsQ0FBQSxZQUFBO0FBQ0EsV0FBQSxFQUFBLENBQUE7QUFDQSxVQUFBLENBQUEsR0FBQSxDQUFBO0FBQ0Esc0JBQUEsRUFBQSxVQUFBLEdBQUEsU0FBQSxHQUFBLENBQUEsRUFBQSxHQUFBLE1BQUE7R0FDQSxDQUFBLENBQUE7QUFDQSxVQUFBLENBQUEsSUFBQSxDQUFBLFlBQUEsRUFBQSxTQUFBLEdBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxDQUFBOztBQUVBLE1BQUEsR0FBQSxPQUFBLENBQUE7QUFDQSxTQUFBLEdBQUEsT0FBQSxJQUFBLFNBQUEsR0FBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBLENBQUE7RUFDQSxFQUFBLElBQUEsQ0FBQTs7Ozs7Ozs7Ozs7OztBQUFBLENBYUEsQ0FBQSxDQUFBOztBQ25EQSxHQUFBLENBQUEsVUFBQSxDQUFBLGFBQUEsRUFBQSxVQUFBLE1BQUEsRUFBQTtBQUNBLEVBQUEsQ0FBQSxRQUFBLENBQUEsQ0FBQSxLQUFBLENBQUEsWUFBQTs7QUFFQSxNQUFBLE9BQUEsR0FBQSxDQUFBLENBQUE7QUFDQSxNQUFBLFVBQUEsR0FBQSxDQUFBLENBQUEsV0FBQSxDQUFBLENBQUEsTUFBQSxDQUFBO0FBQ0EsTUFBQSxRQUFBLEdBQUEsSUFBQSxDQUFBO0FBQ0EsTUFBQSxTQUFBLEdBQUEsS0FBQSxDQUFBO0FBQ0EsTUFBQSxRQUFBLEdBQUEsWUFBQSxDQUFBO0FBQ0EsTUFBQSxVQUFBLEdBQUEsSUFBQSxDQUFBOztBQUVBLFdBQUEsVUFBQSxHQUFBO0FBQ0EsWUFBQSxHQUFBLElBQUEsQ0FBQTs7QUFFQSxJQUFBLENBQUEsUUFBQSxHQUFBLE9BQUEsQ0FBQSxDQUFBLFdBQUEsQ0FBQSxVQUFBLENBQUEsQ0FBQSxRQUFBLENBQUEsUUFBQSxDQUFBLENBQUE7QUFDQSxJQUFBLENBQUEsVUFBQSxHQUFBLE9BQUEsQ0FBQSxDQUFBLFFBQUEsQ0FBQSxTQUFBLENBQUEsQ0FBQTtBQUNBLGFBQUEsQ0FBQSxZQUFBO0FBQ0EsYUFBQSxHQUFBLEtBQUEsQ0FBQTtJQUNBLEVBQUEsUUFBQSxDQUFBLENBQUE7R0FDQTs7QUFFQSxXQUFBLFVBQUEsR0FBQTtBQUNBLE9BQUEsT0FBQSxLQUFBLENBQUEsRUFBQSxPQUFBO0FBQ0EsVUFBQSxFQUFBLENBQUE7QUFDQSxJQUFBLENBQUEsUUFBQSxJQUFBLE9BQUEsR0FBQSxDQUFBLENBQUEsQ0FBQSxDQUFBLFdBQUEsQ0FBQSxRQUFBLENBQUEsQ0FBQTtBQUNBLElBQUEsQ0FBQSxVQUFBLElBQUEsT0FBQSxHQUFBLENBQUEsQ0FBQSxDQUFBLENBQUEsV0FBQSxDQUFBLFNBQUEsQ0FBQSxDQUFBOztBQUVBLGFBQUEsRUFBQSxDQUFBO0dBQ0E7O0FBRUEsV0FBQSxZQUFBLEdBQUE7QUFDQSxPQUFBLE9BQUEsS0FBQSxVQUFBLEVBQUEsT0FBQTtBQUNBLFVBQUEsRUFBQSxDQUFBO0FBQ0EsSUFBQSxDQUFBLFFBQUEsSUFBQSxPQUFBLEdBQUEsQ0FBQSxDQUFBLENBQUEsQ0FBQSxXQUFBLENBQUEsUUFBQSxDQUFBLENBQUE7QUFDQSxJQUFBLENBQUEsVUFBQSxJQUFBLE9BQUEsR0FBQSxDQUFBLENBQUEsQ0FBQSxDQUFBLFdBQUEsQ0FBQSxTQUFBLENBQUEsQ0FBQTtBQUNBLGFBQUEsRUFBQSxDQUFBO0dBQ0E7O0FBRUEsR0FBQSxDQUFBLFFBQUEsQ0FBQSxDQUFBLEVBQUEsQ0FBQSwyQkFBQSxFQUFBLFVBQUEsQ0FBQSxFQUFBO0FBQ0EsT0FBQSxTQUFBLEVBQUEsT0FBQTtBQUNBLE9BQUEsQ0FBQSxDQUFBLGFBQUEsQ0FBQSxVQUFBLEdBQUEsQ0FBQSxJQUFBLENBQUEsQ0FBQSxhQUFBLENBQUEsTUFBQSxHQUFBLENBQUEsRUFBQTtBQUNBLGNBQUEsRUFBQSxDQUFBO0lBQ0EsTUFBQTtBQUNBLGdCQUFBLEVBQUEsQ0FBQTtJQUNBO0dBQ0EsQ0FBQSxDQUFBOztBQUVBLEdBQUEsQ0FBQSxRQUFBLENBQUEsQ0FBQSxFQUFBLENBQUEsU0FBQSxFQUFBLFVBQUEsQ0FBQSxFQUFBO0FBQ0EsT0FBQSxTQUFBLEVBQUEsT0FBQTtBQUNBLE9BQUEsQ0FBQSxDQUFBLEtBQUEsS0FBQSxFQUFBLEVBQUE7QUFDQSxjQUFBLEVBQUEsQ0FBQTtJQUNBLE1BQUEsSUFBQSxDQUFBLENBQUEsS0FBQSxLQUFBLEVBQUEsRUFBQTtBQUNBLGdCQUFBLEVBQUEsQ0FBQTtJQUNBO0dBQ0EsQ0FBQSxDQUFBO0VBQ0EsQ0FBQSxDQUFBO0NBQ0EsQ0FBQSxDQUFBIiwiZmlsZSI6Im1haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJ3aW5kb3cuYXBwID0gYW5ndWxhci5tb2R1bGUoJ3BvcnRmb2xpbycsIFsndWkucm91dGVyJ10pO1xuXG5hcHAuY29uZmlnKGZ1bmN0aW9uICgkdXJsUm91dGVyUHJvdmlkZXIsICRsb2NhdGlvblByb3ZpZGVyLCAkdXJsTWF0Y2hlckZhY3RvcnlQcm92aWRlcikge1xuXG5cdC8vIHRoaXMgbWFrZXMgdGhlICcvc3RvcmVzLycgcm91dGUgY29ycmVjdGx5IHJlZGlyZWN0IHRvICcvc3RvcmVzJ1xuXHQkdXJsUm91dGVyUHJvdmlkZXIucnVsZShmdW5jdGlvbiAoJGluamVjdG9yLCAkbG9jYXRpb24pIHtcblxuXHRcdHZhciByZSA9IC8oLispKFxcLyspKFxcPy4qKT8kLztcblx0XHR2YXIgcGF0aCA9ICRsb2NhdGlvbi51cmwoKTtcblxuXHRcdGlmKHJlLnRlc3QocGF0aCkpIHtcblx0XHRcdHJldHVybiBwYXRoLnJlcGxhY2UocmUsICckMSQzJyk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9KTtcblx0Ly8gVGhpcyB0dXJucyBvZmYgaGFzaGJhbmcgdXJscyAoLyNhYm91dCkgYW5kIGNoYW5nZXMgaXQgdG8gc29tZXRoaW5nIG5vcm1hbCAoL2Fib3V0KVxuXHQkbG9jYXRpb25Qcm92aWRlci5odG1sNU1vZGUodHJ1ZSk7XG5cdCR1cmxSb3V0ZXJQcm92aWRlci53aGVuKCcvYXV0aC86cHJvdmlkZXInLCBmdW5jdGlvbiAoKSB7XG5cdFx0d2luZG93LmxvY2F0aW9uLnJlbG9hZCgpO1xuXHR9KTtcblx0Ly8gSWYgd2UgZ28gdG8gYSBVUkwgdGhhdCB1aS1yb3V0ZXIgZG9lc24ndCBoYXZlIHJlZ2lzdGVyZWQsIGdvIHRvIHRoZSBcIi9cIiB1cmwuXG5cdCR1cmxSb3V0ZXJQcm92aWRlci5vdGhlcndpc2UoJy8nKTtcbn0pO1xuIiwiYXBwLmNvbnRyb2xsZXIoJ2Fib3V0Q3RybCcsIGZ1bmN0aW9uKCRzY29wZSl7XG5cblx0Ly8gYW5ndWxhci5lbGVtZW50KGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpe1xuXHR2YXIgc2tpbGxzQ2xvdWQgPSAkKFwiI3NraWxscy1jbG91ZFwiKTtcblx0dmFyIHdpZHRoID0gc2tpbGxzQ2xvdWQud2lkdGgoKTtcblx0dmFyIGhlaWdodCA9IHNraWxsc0Nsb3VkLmhlaWdodCgpO1xuXG5cdHZhciBzdmcgPSBkMy5zZWxlY3QoXCIjc2tpbGxzLWNsb3VkXCIpLmFwcGVuZChcInN2Z1wiKVxuXG5cdHZhciBza2lsbHMgPSBbXG5cdFx0e25hbWU6IFwiSmF2YVNjcmlwdFwiLCBsZXZlbDogM30sXG5cdFx0e25hbWU6IFwiTW9uZ29EQlwiLCBsZXZlbDogM30sXG5cdFx0e25hbWU6IFwiRXhwcmVzcy5qc1wiLCBsZXZlbDogM30sXG5cdFx0e25hbWU6IFwiQW5ndWxhci5qc1wiLCBsZXZlbDogM30sXG5cdFx0e25hbWU6IFwiTm9kZS5qc1wiLCBsZXZlbDogM30sXG5cdFx0e25hbWU6IFwiTW9uZ29vc2UuanNcIiwgbGV2ZWw6IDN9LFxuXHRcdHtuYW1lOiBcIkdpdFwiLCBsZXZlbDogM30sXG5cdFx0e25hbWU6IFwiQ1NTM1wiLCBsZXZlbDogM30sXG5cdFx0e25hbWU6IFwiSFRNTDVcIiwgbGV2ZWw6IDN9LFxuXHRcdHtuYW1lOiBcIlJlc29uc2l2ZSBEZXNpZ25cIiwgbGV2ZWw6IDJ9LFxuXHRcdHtuYW1lOiBcIkd1bHBcIiwgbGV2ZWw6IDJ9LFxuXHRcdHtuYW1lOiBcIk1vY2hhICYgQ2hhaVwiLCBsZXZlbDogMn0sXG5cdFx0e25hbWU6IFwialF1ZXJ5XCIsIGxldmVsOiAyfSxcblx0XHR7bmFtZTogXCJCb290c3RyYXBcIiwgbGV2ZWw6IDJ9LFxuXHRcdHtuYW1lOiBcIldlYi1BdWRpb1wiLCBsZXZlbDogMn0sXG5cdFx0e25hbWU6IFwiQ2hyb21lIEV4dGVuc2lvbnNcIiwgbGV2ZWw6IDF9LFxuXHRcdHtuYW1lOiBcIlNRTFwiLCBsZXZlbDogMX0sXG5cdFx0e25hbWU6IFwiV2ViU29ja2V0c1wiLCBsZXZlbDogMX0sXG5cdFx0e25hbWU6IFwiTUlESVwiLCBsZXZlbDogMX0sXG5cdFx0e25hbWU6IFwiSmF2YVwiLCBsZXZlbDogMX0sXG5cdFx0e25hbWU6IFwiQysrXCIsIGxldmVsOiAxfSxcblx0XTtcblxuXHQvL2NyZWF0ZSBub2Rlc1xuXHR2YXIgbm9kZXMgPSBkMy5yYW5nZShza2lsbHMubGVuZ3RoKS5tYXAoZnVuY3Rpb24oaSkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRyYWRpdXM6IHNraWxsc1tpXS5sZXZlbCoxOCArMTQsXG5cdFx0XHRsYWJlbDogc2tpbGxzW2ldLm5hbWUsXG5cdFx0XHRza2lsbExldmVsOiBza2lsbHNbaV0ubGV2ZWxcblx0XHR9O1xuXHR9KTtcblxuXHR2YXJcdHJvb3QgPSBub2Rlc1swXSxcblx0XHRjb2xvcnMgPSBbJyM3RkZGRDQnLCcjRTBGRkZGJywnIzMzQ0NGRicsJyNDNjg4RTgnLCcjRkY4MDdEJywnI0ZGOEVCMiddO1xuXHRcdHJvb3QucmFkaXVzID0gMDtcblx0XHRyb290LmZpeGVkID0gdHJ1ZTtcblxuXHR2YXIgZ3JvdXBzID0gc3ZnLnNlbGVjdEFsbChcImdcIilcblx0XHQuZGF0YShub2Rlcy5zbGljZSgxKSlcblx0XHQuZW50ZXIoKVxuXHRcdC5hcHBlbmQoXCJnXCIpO1xuXG5cdHZhciBjaXJjbGVzID0gZ3JvdXBzLmFwcGVuZCgnY2lyY2xlJylcblx0XHQuZGF0YShub2Rlcy5zbGljZSgxKSlcblx0XHQuYXR0cihcInJcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gZC5yYWRpdXM7IH0pXG5cdFx0LnN0eWxlKFwiZmlsbFwiLCBmdW5jdGlvbihkLCBpKSB7XG5cdFx0XHRyZXR1cm4gY29sb3JzW2kgJSA2XTtcblx0XHR9KTtcblxuXHR2YXIgbGFiZWwgPSBncm91cHMuYXBwZW5kKFwidGV4dFwiKVxuXHRcdC50ZXh0KGZ1bmN0aW9uKGQpe1xuXHRcdFx0cmV0dXJuIGQubGFiZWw7XG5cdFx0fSlcblx0XHQuYXR0cih7XG5cdFx0XHRcImFsaWdubWVudC1iYXNlbGluZVwiOiBcIm1pZGRsZVwiLFxuXHRcdFx0XCJ0ZXh0LWFuY2hvclwiOiBcIm1pZGRsZVwiLFxuXHRcdH0pO1xuXG5cdHZhciBmb3JjZSA9IGQzLmxheW91dC5mb3JjZSgpXG5cdFx0LmdyYXZpdHkoMC4wNSlcblx0XHQuY2hhcmdlKGZ1bmN0aW9uKGQsIGkpIHsgcmV0dXJuIGkgPyAwIDogLTMwMDA7IH0pXG5cdFx0Lm5vZGVzKG5vZGVzKVxuXHRcdC5zaXplKFt3aWR0aC0yMDAsIGhlaWdodC0zMDBdKTtcblxuXHRmb3JjZS5zdGFydCgpO1xuXG5cdGZvcmNlLm9uKFwidGlja1wiLCBmdW5jdGlvbihlKSB7XG5cdFx0dmFyIHEgPSBkMy5nZW9tLnF1YWR0cmVlKG5vZGVzKSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0biA9IG5vZGVzLmxlbmd0aDtcblxuXHRcdHdoaWxlICgrK2kgPCBuKSBxLnZpc2l0KGNvbGxpZGUobm9kZXNbaV0pKTtcblxuXHRcdHN2Zy5zZWxlY3RBbGwoXCJjaXJjbGVcIilcblx0XHRcdC5hdHRyKFwiY3hcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gZC54OyB9KVxuXHRcdFx0LmF0dHIoXCJjeVwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBkLnk7IH0pO1xuXG5cdFx0c3ZnLnNlbGVjdEFsbChcInRleHRcIilcblx0XHRcdC5hdHRyKFwieFwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBkLng7IH0pXG5cdFx0XHQuYXR0cihcInlcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gZC55OyB9KTtcblx0fSk7XG5cblx0c3ZnLm9uKFwibW91c2Vtb3ZlXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBwMSA9IGQzLm1vdXNlKHRoaXMpO1xuXHRcdFx0cm9vdC5weCA9IHAxWzBdO1xuXHRcdFx0cm9vdC5weSA9IHAxWzFdO1xuXHRcdGZvcmNlLnJlc3VtZSgpO1xuXHR9KTtcblxuLy9TbyB0aGV5IGRvbid0IGFsbCBzdGFydCBvdXQgaW4gYSBzdHJhaWdodCBsaW5lXG5cdHJvb3QucHggPSAxO1xuXHRyb290LnB5ID0gMTtcblxuXHRmdW5jdGlvbiBjb2xsaWRlKG5vZGUpIHtcblx0XHR2YXIgciA9IG5vZGUucmFkaXVzICsgMTYsXG5cdFx0XHRueDEgPSBub2RlLnggLSByLFxuXHRcdFx0bngyID0gbm9kZS54ICsgcixcblx0XHRcdG55MSA9IG5vZGUueSAtIHIsXG5cdFx0XHRueTIgPSBub2RlLnkgKyByO1xuXHRcdHJldHVybiBmdW5jdGlvbihxdWFkLCB4MSwgeTEsIHgyLCB5Mikge1xuXHRcdFx0aWYgKHF1YWQucG9pbnQgJiYgKHF1YWQucG9pbnQgIT09IG5vZGUpKSB7XG5cdFx0XHRcdHZhciB4ID0gbm9kZS54IC0gcXVhZC5wb2ludC54LFxuXHRcdFx0XHRcdHkgPSBub2RlLnkgLSBxdWFkLnBvaW50LnksXG5cdFx0XHRcdFx0bCA9IE1hdGguc3FydCh4ICogeCArIHkgKiB5KSxcblx0XHRcdFx0XHRyID0gbm9kZS5yYWRpdXMgKyBxdWFkLnBvaW50LnJhZGl1cztcblxuXHRcdFx0XHRpZiAobCA8IHIpIHtcblx0XHRcdFx0XHRsID0gKGwgLSByKSAvIGwgKiAwLjU7XG5cdFx0XHRcdFx0bm9kZS54IC09IHggKj0gbDtcblx0XHRcdFx0XHRub2RlLnkgLT0geSAqPSBsO1xuXHRcdFx0XHRcdHF1YWQucG9pbnQueCArPSB4O1xuXHRcdFx0XHRcdHF1YWQucG9pbnQueSArPSB5O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4geDEgPiBueDIgfHwgeDIgPCBueDEgfHwgeTEgPiBueTIgfHwgeTIgPCBueTE7XG5cdFx0fTtcblx0fVxuXG5cdC8vIH0pO1xuXG59KTtcbiIsImFwcC5jb250cm9sbGVyKCdjb250YWN0Q3RybCcsIGZ1bmN0aW9uKCRzY29wZSwgJGh0dHApe1xuXHQkc2NvcGUuZm9ybURhdGEgPSB7fTtcblxuXHQkc2NvcGUuc2VuZE1haWwgPSBmdW5jdGlvbigpe1xuXHRcdCRzY29wZS53YWl0aW5nID0gdHJ1ZTtcblx0XHQkc2NvcGUuc2VudCA9IGZhbHNlO1xuXHRcdCRzY29wZS5zdWNjZXNzID0gZmFsc2U7XG5cdFx0JGh0dHAucG9zdCgnL2FwaS9jb250YWN0JywgJHNjb3BlLmZvcm1EYXRhKVxuXHRcdC50aGVuKGZ1bmN0aW9uKHN1Y2Nlc3NSZXNwb25zZSl7XG5cdFx0XHRjb25zb2xlLmxvZyhzdWNjZXNzUmVzcG9uc2UpO1xuXHRcdFx0JHNjb3BlLndhaXRpbmcgPSBmYWxzZTtcblx0XHRcdCRzY29wZS5zZW50ID0gdHJ1ZTtcblx0XHRcdCRzY29wZS5zdWNjZXNzID0gc3VjY2Vzc1Jlc3BvbnNlLmRhdGE7XG5cdFx0XHQkc2NvcGUuZm9ybURhdGEgPSB7fTtcblx0XHR9KTtcblx0fTtcblxuXHR2YXIgY2FyZCA9ICQoJyNjYXJkJyk7XG5cdHZhciBub3RlID0gJCgnLm5vdGUnKTtcblx0dmFyIGFycm93ID0gJCgnI2Fycm93Jyk7XG5cdHZhciB0b2dnbGUgPSB0cnVlO1xuXG5cdGFycm93LmNsaWNrKGZ1bmN0aW9uKCl7XG5cdFx0aWYgKHRvZ2dsZSl7XG5cdFx0XHRjYXJkLnJlbW92ZUNsYXNzKCdoaWRkZW4nKS5yZW1vdmVDbGFzcygnaW5pdGlhbCcpLmFkZENsYXNzKCd2aXNpYmxlJyk7XG5cdFx0XHQvLyBhcnJvdy5jc3MoeydkaXNwbGF5JyA6ICdub25lJ30pO1xuXG5cblx0XHRcdC8vIG5vdGUuY3NzKHsnZGlzcGxheSc6ICdpbml0aWFsJ30pO1xuXHRcdFx0c2V0VGltZW91dChleHBsb2RlLCA1MDApO1xuXHRcdFx0c2V0VGltZW91dChmdW5jdGlvbigpe1xuXHRcdFx0XHQkKCcjY2FudmFzJykuY3NzKHsnZGlzcGxheScgOiAnbm9uZSd9KTtcblx0XHRcdFx0Ly8gYXJyb3cuY3NzKHsnZGlzcGxheScgOiAnaW5pdGlhbCd9KTtcblxuXHRcdFx0fSwgNDAwMCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGNhcmQucmVtb3ZlQ2xhc3MoJ3Zpc2libGUnKS5hZGRDbGFzcygnaGlkZGVuJyk7XG5cblxuXHRcdFx0Ly8gbm90ZS5jc3MoeydkaXNwbGF5JzogJ25vbmUnfSk7XG5cdFx0fVxuXHRcdHRvZ2dsZSA9ICF0b2dnbGU7XG5cdH0pO1xuXG5cblx0ZnVuY3Rpb24gZXhwbG9kZSgpIHtcblxuXHRcdCQoJyNjYW52YXMnKS5jc3MoeydkaXNwbGF5JyA6ICdpbml0aWFsJ30pO1xuXG5cdFx0dmFyIHJlcXVlc3RJZDtcblxuXHRcdHZhciBjYW52YXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNhbnZhc1wiKSxcblx0XHRcdGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpLFxuXHRcdFx0d2lkdGggPSBjYW52YXMud2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aCxcblx0XHRcdGhlaWdodCA9IGNhbnZhcy5oZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQsXG5cdFx0XHRwYXJ0aWNsZSA9IFtdLFxuXHRcdFx0cGFydGljbGVDb3VudCA9IDAsXG5cdFx0XHRncmF2aXR5ID0gMC4zLFxuXHRcdFx0Y29sb3JzID1cblx0XHRcdC8vIFtcblx0XHRcdC8vIFx0JyNmNDQzMzYnLCAnI2U5MWU2MycsICcjOWMyN2IwJywgJyM2NzNhYjcnLCAnIzNmNTFiNScsXG5cdFx0XHQvLyBcdCcjMjE5NmYzJywgJyMwM2E5ZjQnLCAnIzAwYmNkNCcsICcjMDA5Njg4JywgJyM0Q0FGNTAnLFxuXHRcdFx0Ly8gXHQnIzhCQzM0QScsICcjQ0REQzM5JywgJyNGRkVCM0InLCAnI0ZGQzEwNycsICcjRkY5ODAwJyxcblx0XHRcdC8vIFx0JyNGRjU3MjInLCAnIzc5NTU0OCdcblx0XHRcdC8vIF07XG5cdFx0XHRbJyM3RkZGRDQnLCcjRTBGRkZGJywnIzMzQ0NGRicsJyNDNjg4RTgnLCcjRkY4MDdEJywnI0ZGOEVCMiddO1xuXG5cdFx0Zm9yKCB2YXIgaSA9IDA7IGkgPCA1MDsgaSsrKXtcblx0XHRcdHBhcnRpY2xlLnB1c2goe1xuXHRcdFx0XHR4IDogd2lkdGgvMixcblx0XHRcdFx0eSA6IGhlaWdodC8yLFxuXHRcdFx0XHRib3hXIDogcmFuZG9tUmFuZ2UoNSwyMCksXG5cdFx0XHRcdGJveEggOiByYW5kb21SYW5nZSg1LDIwKSxcblx0XHRcdFx0c2l6ZSA6IHJhbmRvbVJhbmdlKDIsOCksXG5cblx0XHRcdFx0c3Bpa2VyYW46cmFuZG9tUmFuZ2UoMyw1KSxcblxuXHRcdFx0XHR2ZWxYIDpyYW5kb21SYW5nZSgtOCw4KSxcblx0XHRcdFx0dmVsWSA6cmFuZG9tUmFuZ2UoLTUwLC0xMCksXG5cblx0XHRcdFx0YW5nbGUgOmNvbnZlcnRUb1JhZGlhbnMocmFuZG9tUmFuZ2UoMCwzNjApKSxcblx0XHRcdFx0Y29sb3I6Y29sb3JzW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGNvbG9ycy5sZW5ndGgpXSxcblx0XHRcdFx0YW5nbGVzcGluOnJhbmRvbVJhbmdlKC0wLjIsMC4yKSxcblxuXHRcdFx0XHRkcmF3IDogZHJhd1xuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0dmFyIHIxPXtcblx0XHRcdHg6d2lkdGgvMi0xNTAsXG5cdFx0XHR5OmhlaWdodC8yLTE1MCxcblx0XHRcdHdpZHRoOjMwMCxcblx0XHRcdGhlaWdodDozMDAsXG5cdFx0XHR2ZWxYIDowLFxuXHRcdFx0dmVsWSA6LTEwLFxuXHRcdFx0YWxwaGF0b3A6MFxuXHRcdH07XG5cblxuXHRcdGZ1bmN0aW9uIGRyYXdTY3JlZW4oKXtcblx0XHRcdHZhciBzaXplID0gNTA7XG5cdFx0XHRpZiAocjEuYWxwaGF0b3AgPCAxKXtcblx0XHRcdFx0cjEuYWxwaGF0b3AgKz0gMC4wMTtcblx0XHRcdH0gZWxzZXtcblx0XHRcdFx0cjEuYWxwaGF0b3AgPSAxO1xuXHRcdFx0fVxuXHRcdFx0Y29udGV4dC5nbG9iYWxBbHBoYSA9IHIxLmFscGhhdG9wO1xuXG5cdFx0XHRpZihyMS5hbHBoYXRvcCA9PT0gMSl7XG5cdFx0XHRcdHIxLnZlbFkqPSAwLjk5OTtcblx0XHRcdFx0cjEudmVsWSArPSAwLjM7XG5cdFx0XHRcdHIxLnggKz0gcjEudmVsWDtcblx0XHRcdFx0cjEueSArPSByMS52ZWxZO1xuXHRcdFx0fVxuXG5cdFx0XHRpZihyMS55ICsgcjEuaGVpZ2h0ID4gaGVpZ2h0KXtcblx0XHRcdFx0cjEuYW5nbGVzcGluID0gMDtcblx0XHRcdFx0cjEueSA9IGhlaWdodCAtIHIxLmhlaWdodDtcblx0XHRcdFx0cjEudmVsWSAqPSAtMC44O1xuXHRcdFx0XHRyMS52ZWxYICo9IDAuOTtcblx0XHRcdH1cblxuXHRcdFx0Y29udGV4dC5nbG9iYWxBbHBoYSA9IDE7XG5cblx0XHRcdGZvciggdmFyIGkgPSAwOyBpIDwgcGFydGljbGUubGVuZ3RoOyBpKyspe1xuXHRcdFx0XHRwYXJ0aWNsZVtpXS5kcmF3KCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gdXBkYXRlKCl7XG5cdFx0XHRjb250ZXh0LmNsZWFyUmVjdCgwLDAsd2lkdGgsaGVpZ2h0KTtcblx0XHRcdGRyYXdTY3JlZW4oKTtcblx0XHRcdHJlcXVlc3RJZCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZSh1cGRhdGUpO1xuXHRcdH1cblxuXHRcdHVwZGF0ZSgpO1xuXG5cdFx0c2V0VGltZW91dChmdW5jdGlvbigpe1xuXHRcdFx0d2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lKHJlcXVlc3RJZCk7XG5cdFx0XHRyZXF1ZXN0SWQgPSB1bmRlZmluZWQ7XG5cdFx0fSw1MDAwKTtcblxuXHRcdGZ1bmN0aW9uIHJhbmRvbVJhbmdlKG1pbiwgbWF4KXtcblx0XHRcdHJldHVybiBtaW4gKyBNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbiApO1xuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIHJhbmRvbUludChtaW4sIG1heCl7XG5cdFx0XHRyZXR1cm4gTWF0aC5mbG9vcihtaW4gKyBNYXRoLnJhbmRvbSgpKiAobWF4IC0gbWluICsgMSkpO1xuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGNvbnZlcnRUb1JhZGlhbnMoZGVncmVlKSB7XG5cdFx0XHRyZXR1cm4gZGVncmVlKihNYXRoLlBJLzE4MCk7XG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gZHJhd1N0YXIoY3gsIGN5LCBzcGlrZXMsIG91dGVyUmFkaXVzLCBpbm5lclJhZGl1cyxjb2xvcikge1xuXHRcdFx0dmFyIHJvdCA9IE1hdGguUEkgLyAyICogMztcblx0XHRcdHZhciB4ID0gY3g7XG5cdFx0XHR2YXIgeSA9IGN5O1xuXHRcdFx0dmFyIHN0ZXAgPSBNYXRoLlBJIC8gc3Bpa2VzO1xuXG5cdFx0XHRjb250ZXh0LnN0cm9rZVN5bGUgPSBcIiMwMDBcIjtcblx0XHRcdGNvbnRleHQuYmVnaW5QYXRoKCk7XG5cdFx0XHRjb250ZXh0Lm1vdmVUbyhjeCwgY3kgLSBvdXRlclJhZGl1cyk7XG5cdFx0XHRmb3IgKGkgPSAwOyBpIDwgc3Bpa2VzOyBpKyspIHtcblx0XHRcdFx0eCA9IGN4ICsgTWF0aC5jb3Mocm90KSAqIG91dGVyUmFkaXVzO1xuXHRcdFx0XHR5ID0gY3kgKyBNYXRoLnNpbihyb3QpICogb3V0ZXJSYWRpdXM7XG5cdFx0XHRcdGNvbnRleHQubGluZVRvKHgsIHkpO1xuXHRcdFx0XHRyb3QgKz0gc3RlcDtcblxuXHRcdFx0XHR4ID0gY3ggKyBNYXRoLmNvcyhyb3QpICogaW5uZXJSYWRpdXM7XG5cdFx0XHRcdHkgPSBjeSArIE1hdGguc2luKHJvdCkgKiBpbm5lclJhZGl1cztcblx0XHRcdFx0Y29udGV4dC5saW5lVG8oeCwgeSk7XG5cdFx0XHRcdHJvdCArPSBzdGVwO1xuXHRcdFx0fVxuXG5cdFx0XHRjb250ZXh0LmxpbmVUbyhjeCwgY3kgLSBvdXRlclJhZGl1cyk7XG5cdFx0XHRjb250ZXh0LmNsb3NlUGF0aCgpO1xuXHRcdFx0Y29udGV4dC5maWxsU3R5bGU9Y29sb3I7XG5cdFx0XHRjb250ZXh0LmZpbGwoKTtcblx0XHR9XG5cblx0XHRmdW5jdGlvbiBkcmF3KCl7XG5cdFx0XHRjb250ZXh0LnNhdmUoKTtcblx0XHRcdGNvbnRleHQudHJhbnNsYXRlKHRoaXMueCx0aGlzLnkpO1xuXHRcdFx0Y29udGV4dC5yb3RhdGUodGhpcy5hbmdsZSk7XG5cdFx0XHRjb250ZXh0LmZpbGxTdHlsZT10aGlzLmNvbG9yO1xuXHRcdFx0Y29udGV4dC5iZWdpblBhdGgoKTtcblx0XHRcdC8vIGRyYXdTdGFyKDAsIDAsIDUsIHRoaXMuYm94VywgdGhpcy5ib3hIKTtcblx0XHRcdGNvbnRleHQuZmlsbFJlY3QodGhpcy5ib3hXLzIqLTEsdGhpcy5ib3hILzIqLTEsdGhpcy5ib3hXLHRoaXMuYm94SCk7XG5cdFx0XHRjb250ZXh0LmZpbGwoKTtcblx0XHRcdGNvbnRleHQuY2xvc2VQYXRoKCk7XG5cdFx0XHRjb250ZXh0LnJlc3RvcmUoKTtcblx0XHRcdHRoaXMuYW5nbGUgKz0gdGhpcy5hbmdsZXNwaW47XG5cdFx0XHR0aGlzLnZlbFkqPSAwLjk5OTtcblx0XHRcdHRoaXMudmVsWSArPSAwLjM7XG5cdFx0XHR0aGlzLnggKz0gdGhpcy52ZWxYO1xuXHRcdFx0dGhpcy55ICs9IHRoaXMudmVsWTtcblxuXHRcdFx0aWYodGhpcy55IDwgMCl7XG5cdFx0XHRcdHRoaXMudmVsWSAqPSAtMC4yO1xuXHRcdFx0XHR0aGlzLnZlbFggKj0gMC45O1xuXHRcdFx0fVxuXHRcdFx0aWYgKHRoaXMueSA+IGhlaWdodCl7XG5cdFx0XHRcdHRoaXMuYW5nbGVzcGluID0gMDtcblx0XHRcdFx0dGhpcy55ID0gaGVpZ2h0O1xuXHRcdFx0XHR0aGlzLnZlbFkgKj0gLTAuMjtcblx0XHRcdFx0dGhpcy52ZWxYICo9IDAuOTtcblx0XHRcdH1cblx0XHRcdGlmICh0aGlzLnggPiB3aWR0aCB8fHRoaXMueDwgMCl7XG5cdFx0XHRcdHRoaXMudmVsWCAqPSAtMC41O1xuXHRcdFx0fVxuXG5cdFx0fVxuXHR9XG5cbn0pO1xuIiwiYXBwLmNvbmZpZyhmdW5jdGlvbigkc3RhdGVQcm92aWRlcil7XG5cdCRzdGF0ZVByb3ZpZGVyXG5cdC5zdGF0ZSgnaG9tZScsIHtcblx0XHR1cmw6ICcvJyxcblx0XHR0ZW1wbGF0ZVVybDogJy9qcy90ZW1wbGF0ZXMvaG9tZS5odG1sJyxcblx0XHRjb250cm9sbGVyOiAnaG9tZUN0cmwnXG5cdH0pXG5cdC5zdGF0ZSgncHJvamVjdHMnLCB7XG5cdFx0dXJsOiAnL3Byb2plY3RzJyxcblx0XHR0ZW1wbGF0ZVVybDogJy9qcy90ZW1wbGF0ZXMvcHJvamVjdHMuaHRtbCcsXG5cdFx0Y29udHJvbGxlcjogJ3Byb2plY3RDdHJsJ1xuXHR9KVxuXHQuc3RhdGUoJ2Fib3V0Jywge1xuXHRcdHVybDogJy9hYm91dCcsXG5cdFx0dGVtcGxhdGVVcmw6ICcvanMvdGVtcGxhdGVzL2Fib3V0Lmh0bWwnLFxuXHRcdGNvbnRyb2xsZXI6ICdhYm91dEN0cmwnXG5cdH0pXG5cdC5zdGF0ZSgnY29udGFjdCcsIHtcblx0XHR1cmw6ICcvY29udGFjdCcsXG5cdFx0dGVtcGxhdGVVcmw6ICcvanMvdGVtcGxhdGVzL2NvbnRhY3QuaHRtbCcsXG5cdFx0Y29udHJvbGxlcjogJ2NvbnRhY3RDdHJsJ1xuXHR9KTtcbn0pO1xuXG5hcHAuY29udHJvbGxlcignaG9tZUN0cmwnLCBmdW5jdGlvbigpe1xuXHR2YXIgaW5jcmVtZW50ID0gMDtcblx0dmFyIGNhcm91c2VsID0gJCgnI2Nhcm91c2VsJyk7XG5cdHZhciBjdXJyZW50ID0gJyNmaWctMSc7XG5cdHZhciBwcmV2O1xuXHRzZXRJbnRlcnZhbCggZnVuY3Rpb24oKXtcblx0XHRpbmNyZW1lbnQrKztcblx0XHRjYXJvdXNlbC5jc3Moe1xuXHRcdFx0Jy13ZWJraXQtdHJhbnNmb3JtJzogJ3JvdGF0ZVgoJyArIChpbmNyZW1lbnQgKiAtNjApICsgJ2RlZyknXG5cdFx0fSk7XG5cdFx0Y2Fyb3VzZWwuYXR0cignZGF0YS1zdGF0ZScsKGluY3JlbWVudCAlIDYpICsgMSk7XG5cblx0XHRwcmV2ID0gY3VycmVudDtcblx0XHRjdXJyZW50ID0gJyNmaWctJyArICgoaW5jcmVtZW50ICUgNikgKyAxKTtcblx0fSwxNTAwKTtcblxuXHQvLyB2YXIgY2lyY2xlMSA9ICQoJyNjaXJjbGUtMScpO1xuXHQvLyBjb25zb2xlLmxvZygnJGNpcmNsZS0xJywgY2lyY2xlMSk7XG5cdC8vIHZhciBjaXJjbGUyID0gJCgnI2NpcmNsZS0yJyk7XG5cdC8vIC8vIHZhciBjaXJjbGUzID0gJCgnI2NpcmNsZS0zJyk7XG5cdC8vXG5cdC8vIGNpcmNsZTEuY2xpY2soZnVuY3Rpb24oKXtcblx0Ly8gXHRjaXJjbGUxLmFkZENsYXNzKCdzcGluLWNsb2Nrd2lzZScpO1xuXHQvLyBcdHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcblx0Ly8gXHRcdGNpcmNsZTIuYWRkQ2xhc3MoJ3NwaW4tY291bnRlcmNsb2Nrd2lzZScpO1xuXHQvLyBcdH0sNTAwKTtcblx0Ly8gfSk7XG59KTtcbiIsImFwcC5jb250cm9sbGVyKCdwcm9qZWN0Q3RybCcsIGZ1bmN0aW9uKCRzY29wZSl7XG5cdCQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCkge1xuXG5cdFx0dmFyIGN1clBhZ2UgPSAxO1xuXHRcdHZhciBudW1PZlBhZ2VzID0gJChcIi5za3ctcGFnZVwiKS5sZW5ndGg7XG5cdFx0dmFyIGFuaW1UaW1lID0gMTAwMDtcblx0XHR2YXIgc2Nyb2xsaW5nID0gZmFsc2U7XG5cdFx0dmFyIHBnUHJlZml4ID0gXCIuc2t3LXBhZ2UtXCI7XG5cdFx0dmFyIHByb2dQcmVmaXggPSBcIiNwXCI7XG5cblx0XHRmdW5jdGlvbiBwYWdpbmF0aW9uKCkge1xuXHRcdFx0c2Nyb2xsaW5nID0gdHJ1ZTtcblxuXHRcdFx0JChwZ1ByZWZpeCArIGN1clBhZ2UpLnJlbW92ZUNsYXNzKFwiaW5hY3RpdmVcIikuYWRkQ2xhc3MoXCJhY3RpdmVcIik7XG5cdFx0XHQkKHByb2dQcmVmaXggKyBjdXJQYWdlKS5hZGRDbGFzcyhcImN1cnJlbnRcIik7XG5cdFx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRzY3JvbGxpbmcgPSBmYWxzZTtcblx0XHRcdH0sIGFuaW1UaW1lKTtcblx0XHR9XG5cblx0XHRmdW5jdGlvbiBuYXZpZ2F0ZVVwKCkge1xuXHRcdFx0aWYgKGN1clBhZ2UgPT09IDEpIHJldHVybjtcblx0XHRcdGN1clBhZ2UtLTtcblx0XHRcdCQocGdQcmVmaXggKyAoY3VyUGFnZSArIDEpKS5yZW1vdmVDbGFzcyhcImFjdGl2ZVwiKTtcblx0XHRcdCQocHJvZ1ByZWZpeCArIChjdXJQYWdlICsgMSkpLnJlbW92ZUNsYXNzKFwiY3VycmVudFwiKTtcblxuXHRcdFx0cGFnaW5hdGlvbigpO1xuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIG5hdmlnYXRlRG93bigpIHtcblx0XHRcdGlmIChjdXJQYWdlID09PSBudW1PZlBhZ2VzKSByZXR1cm47XG5cdFx0XHRjdXJQYWdlKys7XG5cdFx0XHQkKHBnUHJlZml4ICsgKGN1clBhZ2UgLSAxKSkucmVtb3ZlQ2xhc3MoXCJhY3RpdmVcIik7XG5cdFx0XHQkKHByb2dQcmVmaXggKyAoY3VyUGFnZSAtMSkpLnJlbW92ZUNsYXNzKFwiY3VycmVudFwiKTtcblx0XHRcdHBhZ2luYXRpb24oKTtcblx0XHR9XG5cblx0XHQkKGRvY3VtZW50KS5vbihcIm1vdXNld2hlZWwgRE9NTW91c2VTY3JvbGxcIiwgZnVuY3Rpb24oZSkge1xuXHRcdFx0aWYgKHNjcm9sbGluZykgcmV0dXJuO1xuXHRcdFx0aWYgKGUub3JpZ2luYWxFdmVudC53aGVlbERlbHRhID4gMCAgfHwgZS5vcmlnaW5hbEV2ZW50LmRldGFpbCA8IDApIHtcblx0XHRcdFx0bmF2aWdhdGVVcCgpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bmF2aWdhdGVEb3duKCk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHQkKGRvY3VtZW50KS5vbihcImtleWRvd25cIiwgZnVuY3Rpb24oZSkge1xuXHRcdFx0aWYgKHNjcm9sbGluZykgcmV0dXJuO1xuXHRcdFx0aWYgKGUud2hpY2ggPT09IDM4KSB7XG5cdFx0XHRcdG5hdmlnYXRlVXAoKTtcblx0XHRcdH0gZWxzZSBpZiAoZS53aGljaCA9PT0gNDApIHtcblx0XHRcdFx0bmF2aWdhdGVEb3duKCk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH0pO1xufSk7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
